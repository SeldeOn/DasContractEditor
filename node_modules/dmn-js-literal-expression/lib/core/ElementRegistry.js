function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * A single decision element registry.
 *
 * The sole purpose of this service is to provide the necessary API
 * to serve shared components, i.e. the UpdatePropertiesHandler.
 */
var ElementRegistry = /*#__PURE__*/function () {
  function ElementRegistry(viewer, eventBus) {
    _classCallCheck(this, ElementRegistry);

    this._eventBus = eventBus;
    this._viewer = viewer;
  }

  _createClass(ElementRegistry, [{
    key: "getDecision",
    value: function getDecision() {
      return this._viewer.getDecision();
    }
  }, {
    key: "updateId",
    value: function updateId(element, newId) {
      var decision = this.getDecision();

      if (element !== decision) {
        throw new Error('element !== decision');
      }

      this._eventBus.fire('element.updateId', {
        element: element,
        newId: newId
      });

      element.id = newId;
    }
  }]);

  return ElementRegistry;
}();

export { ElementRegistry as default };
ElementRegistry.$inject = ['viewer', 'eventBus'];
//# sourceMappingURL=ElementRegistry.js.map