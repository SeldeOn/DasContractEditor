function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import { forEach } from 'min-dash';
var NOT_REGISTERED_ERROR = 'is not a registered action',
    IS_REGISTERED_ERROR = 'is already registered';
/**
 * An interface that provides access to modeling actions by decoupling
 * the one who requests the action to be triggered and the trigger itself.
 *
 * It's possible to add new actions by registering them with ´registerAction´ and likewise
 * unregister existing ones with ´unregisterAction´.
 *
 */

var EditorActions = /*#__PURE__*/function () {
  function EditorActions(commandStack, eventBus) {
    _classCallCheck(this, EditorActions);

    this._actions = {
      undo: function undo() {
        commandStack.undo();
      },
      redo: function redo() {
        commandStack.redo();
      }
    };
  }
  /**
   * Triggers a registered action
   *
   * @param  {string} action
   * @param  {Object} opts
   *
   * @return {Unknown} Returns what the registered listener returns
   */


  _createClass(EditorActions, [{
    key: "trigger",
    value: function trigger(action, opts) {
      if (!this._actions[action]) {
        throw error(action, NOT_REGISTERED_ERROR);
      }

      return this._actions[action](opts);
    }
    /**
     * Registers a collections of actions.
     * The key of the object will be the name of the action.
     *
     * @param  {Object} actions
     */

  }, {
    key: "register",
    value: function register(actions, listener) {
      var _this = this;

      if (typeof actions === 'string') {
        return this._registerAction(actions, listener);
      }

      forEach(actions, function (listener, action) {
        _this._registerAction(action, listener);
      }, this);
    }
    /**
     * Registers a listener to an action key
     *
     * @param  {string} action
     * @param  {Function} listener
     */

  }, {
    key: "_registerAction",
    value: function _registerAction(action, listener) {
      if (this.isRegistered(action)) {
        throw error(action, IS_REGISTERED_ERROR);
      }

      this._actions[action] = listener;
    }
    /**
     * Unregister an existing action
     *
     * @param {string} action
     */

  }, {
    key: "unregister",
    value: function unregister(action) {
      if (!this.isRegistered(action)) {
        throw error(action, NOT_REGISTERED_ERROR);
      }

      this._actions[action] = undefined;
    }
    /**
     * Checks wether the given action is registered
     *
     * @param {string} action
     *
     * @return {boolean}
     */

  }, {
    key: "isRegistered",
    value: function isRegistered(action) {
      return !!this._actions[action];
    }
  }]);

  return EditorActions;
}();

export { EditorActions as default };
EditorActions.$inject = ['commandStack', 'eventBus']; // helpers /////////////

function error(action, message) {
  return new Error(action + ' ' + message);
}
//# sourceMappingURL=EditorActions.js.map