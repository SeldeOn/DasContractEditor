{"version":3,"sources":["../../../src/features/keyboard/Keyboard.js"],"names":["event","domEvent","isCmd","isShift","Keyboard","config","eventBus","editorActions","_registerDefaultBindings","_fire","unbind","_listeners","i","l","listeners","code","keyCode","charCode","preventDefault","stopPropagation","node","_node","_keyHandler","_config","_eventBus","_editorActions","on","_destroy","_init","bindTo","bind","fire","undo","key","modifiers","trigger","redo","push","listenerFn","unshift","filter","$inject"],"mappings":"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","sourcesContent":["import {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  isCmd,\n  isShift\n} from './KeyboardUtil';\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain the fields (node, listeners).\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n * @param {EditorActions} editorActions\n */\nexport default class Keyboard {\n\n  constructor(config, eventBus, editorActions) {\n\n    this._config = config || {};\n    this._eventBus = eventBus;\n    this._editorActions = editorActions;\n\n    this._listeners = [];\n\n    eventBus.on('viewer.destroy', this._destroy);\n    eventBus.on('viewer.init', this._init);\n\n    eventBus.on('attach', () => {\n\n      if (this._config.bindTo) {\n        this.bind(config.bindTo);\n      }\n    });\n\n    eventBus.on('detach', this.unbind);\n  }\n\n  _init = () => {\n    this._registerDefaultBindings();\n\n    this._fire('init');\n  }\n\n  _destroy = () => {\n    this._fire('destroy');\n\n    this.unbind();\n    this._listeners = null;\n  }\n\n  // our key handler is a singleton that passes\n  // (keycode, modifiers) to each listener.\n  //\n  // listeners must indicate that they handled a key event\n  // by returning true. This stops the event propagation.\n  //\n  _keyHandler = (event) => {\n\n    var i, l,\n        listeners = this._listeners,\n        code = event.keyCode || event.charCode || -1;\n\n    for (i = 0; (l = listeners[i]); i++) {\n      if (l(code, event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        return;\n      }\n    }\n  }\n\n  bind(node) {\n\n    // make sure that the keyboard is only bound once to the DOM\n    this.unbind();\n\n    this._node = node;\n\n    // bind key events\n    domEvent.bind(node, 'keydown', this._keyHandler, true);\n\n    this._fire('bind');\n  }\n\n  getBinding() {\n    return this._node;\n  }\n\n  unbind = () => {\n    var node = this._node;\n\n    if (node) {\n      this._fire('unbind');\n\n      // unbind key events\n      domEvent.unbind(node, 'keydown', this._keyHandler, true);\n    }\n\n    this._node = null;\n  }\n\n  _fire(event) {\n    this._eventBus.fire('keyboard.' + event, {\n      node: this._node,\n      listeners: this._listeners\n    });\n  }\n\n  _registerDefaultBindings() {\n\n    var listeners = this._listeners;\n\n    var editorActions = this._editorActions;\n\n    // init default listeners\n\n    // undo\n    // (CTRL|CMD) + Z\n    function undo(key, modifiers) {\n\n      if (isCmd(modifiers) && !isShift(modifiers) && key === 90) {\n        editorActions.trigger('undo');\n\n        return true;\n      }\n    }\n\n    // redo\n    // CTRL + Y\n    // CMD + SHIFT + Z\n    function redo(key, modifiers) {\n\n      if (\n        isCmd(modifiers) && (\n          key === 89 || (\n            key === 90 && isShift(modifiers)\n          )\n        )\n      ) {\n        editorActions.trigger('redo');\n\n        return true;\n      }\n    }\n\n    listeners.push(undo);\n    listeners.push(redo);\n  }\n\n\n  /**\n   * Add a listener function that is notified with (key, modifiers) whenever\n   * the keyboard is bound and the user presses a key.\n   *\n   * @param {Function} listenerFn\n   */\n  addListener(listenerFn) {\n    this._listeners.unshift(listenerFn);\n  }\n\n  removeListener(listenerFn) {\n    this._listeners = this._listeners.filter(l => l !== listenerFn);\n  }\n\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus',\n  'editorActions'\n];"],"file":"Keyboard.js"}