function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import { createVNode, createComponentVNode, createTextVNode } from "inferno";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { Component } from 'inferno';
import Input from 'dmn-js-shared/lib/components/Input';
import InputSelect from 'dmn-js-shared/lib/components/InputSelect';

var LiteralExpressionPropertiesComponent = /*#__PURE__*/function (_Component) {
  _inherits(LiteralExpressionPropertiesComponent, _Component);

  var _super = _createSuper(LiteralExpressionPropertiesComponent);

  function LiteralExpressionPropertiesComponent(props, context) {
    var _this;

    _classCallCheck(this, LiteralExpressionPropertiesComponent);

    _this = _super.call(this, props, context);
    _this._viewer = context.injector.get('viewer');
    _this._modeling = context.injector.get('modeling');
    _this._dataTypes = context.injector.get('dataTypes');

    var decision = _this._viewer.getDecision();

    _this.state = {
      name: decision.variable.name,
      typeRef: decision.variable.typeRef
    };
    _this.setVariableName = _this.setVariableName.bind(_assertThisInitialized(_this));
    _this.setVariableType = _this.setVariableType.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(LiteralExpressionPropertiesComponent, [{
    key: "setVariableName",
    value: function setVariableName(name) {
      this._modeling.editVariableName(name);

      this.setState({
        name: name
      });
    }
  }, {
    key: "setVariableType",
    value: function setVariableType(typeRef) {
      if (typeRef === '') {
        this._modeling.editVariableType(undefined);

        this.setState({
          typeRef: undefined
        });
      } else {
        this._modeling.editVariableType(typeRef);

        this.setState({
          typeRef: typeRef
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          name = _this$state.name,
          typeRef = _this$state.typeRef;

      var typeRefOptions = this._dataTypes.getAll().map(function (t) {
        return {
          label: t,
          value: t
        };
      });

      return createVNode(1, "div", "literal-expression-properties", createVNode(1, "table", null, [createVNode(1, "tr", null, [createVNode(1, "td", null, createTextVNode("Variable Name:"), 2), createVNode(1, "td", null, createComponentVNode(2, Input, {
        "className": "variable-name-input",
        "onInput": this.setVariableName,
        "placeholder": 'name',
        "value": name || ''
      }), 2)], 4), createVNode(1, "tr", null, [createVNode(1, "td", null, createTextVNode("Variable Type:"), 2), createVNode(1, "td", null, createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "onChange": this.setVariableType,
        "options": typeRefOptions,
        "value": typeRef,
        "className": "variable-type-select dms-block"
      }), 2), 2)], 4), createComponentVNode(2, ExpressionLanguage)], 4), 2);
    }
  }]);

  return LiteralExpressionPropertiesComponent;
}(Component);

export { LiteralExpressionPropertiesComponent as default };

var ExpressionLanguage = /*#__PURE__*/function (_Component2) {
  _inherits(ExpressionLanguage, _Component2);

  var _super2 = _createSuper(ExpressionLanguage);

  function ExpressionLanguage(props, context) {
    var _this2;

    _classCallCheck(this, ExpressionLanguage);

    _this2 = _super2.call(this, props, context);
    _this2._viewer = context.injector.get('viewer');
    _this2._modeling = context.injector.get('modeling');
    _this2._expressionLanguages = context.injector.get('expressionLanguages');
    _this2.setExpressionLanguage = _this2.setExpressionLanguage.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  _createClass(ExpressionLanguage, [{
    key: "setExpressionLanguage",
    value: function setExpressionLanguage(expressionLanguage) {
      if (expressionLanguage === '') {
        this._modeling.editExpressionLanguage(undefined);
      } else {
        this._modeling.editExpressionLanguage(expressionLanguage);
      }
    }
  }, {
    key: "_getExpressionLanguage",
    value: function _getExpressionLanguage() {
      var decision = this._viewer.getDecision();

      var literalExpression = decision.decisionLogic;
      return literalExpression && literalExpression.expressionLanguage ? literalExpression.expressionLanguage.toLowerCase() : this._getDefaultExpressionLanguage();
    }
  }, {
    key: "_getDefaultExpressionLanguage",
    value: function _getDefaultExpressionLanguage() {
      return this._expressionLanguages.getDefault().value;
    }
  }, {
    key: "_shouldRender",
    value: function _shouldRender() {
      var expressionLanguages = this._expressionLanguages.getAll();

      if (expressionLanguages.length > 1) {
        return true;
      }

      var expressionLanguage = this._getExpressionLanguage();

      return expressionLanguage !== this._getDefaultExpressionLanguage();
    }
  }, {
    key: "render",
    value: function render() {
      if (!this._shouldRender()) {
        return null;
      }

      var expressionLanguage = this._getExpressionLanguage();

      var languageOptions = this._expressionLanguages.getAll();

      return createVNode(1, "tr", null, [createVNode(1, "td", null, createTextVNode("Expression Language:"), 2), createVNode(1, "td", null, createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "onChange": this.setExpressionLanguage,
        "options": languageOptions,
        "value": expressionLanguage,
        "className": "expression-language-select dms-block"
      }), 2), 2)], 4);
    }
  }]);

  return ExpressionLanguage;
}(Component);
//# sourceMappingURL=LiteralExpressionPropertiesEditorComponent.js.map