{"version":3,"sources":["../../../../src/features/literal-expression-properties/components/LiteralExpressionPropertiesEditorComponent.js"],"names":["Component","Input","InputSelect","LiteralExpressionPropertiesComponent","props","context","_viewer","injector","get","_modeling","_dataTypes","decision","getDecision","state","name","variable","typeRef","setVariableName","bind","setVariableType","editVariableName","setState","editVariableType","undefined","typeRefOptions","getAll","map","t","label","value","ExpressionLanguage","_expressionLanguages","setExpressionLanguage","expressionLanguage","editExpressionLanguage","literalExpression","decisionLogic","toLowerCase","_getDefaultExpressionLanguage","getDefault","expressionLanguages","length","_getExpressionLanguage","_shouldRender","languageOptions"],"mappings":"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","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport Input from 'dmn-js-shared/lib/components/Input';\r\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\n\r\nexport default class LiteralExpressionPropertiesComponent extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._viewer = context.injector.get('viewer');\r\n    this._modeling = context.injector.get('modeling');\r\n    this._dataTypes = context.injector.get('dataTypes');\r\n\r\n    const decision = this._viewer.getDecision();\r\n\r\n    this.state = {\r\n      name: decision.variable.name,\r\n      typeRef: decision.variable.typeRef\r\n    };\r\n\r\n    this.setVariableName = this.setVariableName.bind(this);\r\n    this.setVariableType = this.setVariableType.bind(this);\r\n  }\r\n\r\n  setVariableName(name) {\r\n    this._modeling.editVariableName(name);\r\n\r\n    this.setState({\r\n      name\r\n    });\r\n  }\r\n\r\n  setVariableType(typeRef) {\r\n    if (typeRef === '') {\r\n      this._modeling.editVariableType(undefined);\r\n\r\n      this.setState({\r\n        typeRef: undefined\r\n      });\r\n    } else {\r\n      this._modeling.editVariableType(typeRef);\r\n\r\n      this.setState({\r\n        typeRef\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, typeRef } = this.state;\r\n\r\n    const typeRefOptions = this._dataTypes.getAll().map(t => {\r\n      return {\r\n        label: t,\r\n        value: t\r\n      };\r\n    });\r\n\r\n    return (\r\n      <div className=\"literal-expression-properties\">\r\n        <table>\r\n          <tr>\r\n            <td>Variable Name:</td>\r\n            <td>\r\n              <Input\r\n                className=\"variable-name-input\"\r\n                onInput={ this.setVariableName }\r\n                placeholder={ 'name' }\r\n                value={ name || '' } />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Variable Type:</td>\r\n            <td>\r\n              <div className=\"dms-fill-row\">\r\n                <InputSelect\r\n                  onChange={ this.setVariableType }\r\n                  options={ typeRefOptions }\r\n                  value={ typeRef }\r\n                  className=\"variable-type-select dms-block\" />\r\n              </div>\r\n            </td>\r\n          </tr>\r\n          <ExpressionLanguage />\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass ExpressionLanguage extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._viewer = context.injector.get('viewer');\r\n    this._modeling = context.injector.get('modeling');\r\n    this._expressionLanguages = context.injector.get('expressionLanguages');\r\n\r\n    this.setExpressionLanguage = this.setExpressionLanguage.bind(this);\r\n  }\r\n\r\n  setExpressionLanguage(expressionLanguage) {\r\n    if (expressionLanguage === '') {\r\n      this._modeling.editExpressionLanguage(undefined);\r\n    } else {\r\n      this._modeling.editExpressionLanguage(expressionLanguage);\r\n    }\r\n  }\r\n\r\n  _getExpressionLanguage() {\r\n    const decision = this._viewer.getDecision();\r\n    const literalExpression = decision.decisionLogic;\r\n\r\n    return (literalExpression && literalExpression.expressionLanguage)\r\n      ? literalExpression.expressionLanguage.toLowerCase()\r\n      : this._getDefaultExpressionLanguage();\r\n  }\r\n\r\n  _getDefaultExpressionLanguage() {\r\n    return this._expressionLanguages.getDefault().value;\r\n  }\r\n\r\n  _shouldRender() {\r\n    const expressionLanguages = this._expressionLanguages.getAll();\r\n\r\n    if (expressionLanguages.length > 1) {\r\n      return true;\r\n    }\r\n\r\n    const expressionLanguage = this._getExpressionLanguage();\r\n\r\n    return expressionLanguage !== this._getDefaultExpressionLanguage();\r\n  }\r\n\r\n  render() {\r\n    if (!this._shouldRender()) {\r\n      return null;\r\n    }\r\n\r\n    const expressionLanguage = this._getExpressionLanguage();\r\n\r\n    const languageOptions = this._expressionLanguages.getAll();\r\n\r\n    return (\r\n      <tr>\r\n        <td>Expression Language:</td>\r\n        <td>\r\n          <div className=\"dms-fill-row\">\r\n            <InputSelect\r\n              onChange={ this.setExpressionLanguage }\r\n              options={ languageOptions }\r\n              value={ expressionLanguage }\r\n              className=\"expression-language-select dms-block\" />\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n"],"file":"LiteralExpressionPropertiesEditorComponent.js"}