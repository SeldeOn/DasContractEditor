{"version":3,"sources":["../../../src/features/keyboard/Keyboard.js"],"names":["event","domEvent","findSelectableAncestor","isCmd","isShift","Keyboard","config","eventBus","editorActions","cellSelection","_registerDefaultBindings","_fire","unbind","_listeners","i","l","listeners","code","keyCode","charCode","preventDefault","stopPropagation","node","_node","_keyHandler","_config","_editorActions","_eventBus","_cellSelection","on","_destroy","_init","bindTo","bind","fire","undo","key","modifiers","trigger","redo","push","selectCellAbove","target","selectCellBelow","changed","selectedCell","getCellSelection","isDecisionNameCell","rule","listenerFn","unshift","filter","$inject","cell"],"mappings":"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","sourcesContent":["import {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  findSelectableAncestor\n} from '../cell-selection/CellSelectionUtil';\n\nimport {\n  isCmd,\n  isShift\n} from './KeyboardUtil';\n\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain the fields (node, listeners).\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n * @param {EditorActions} editorActions\n * @param {CellSelection} cellSelection\n */\nexport default class Keyboard {\n\n  constructor(config, eventBus, editorActions, cellSelection) {\n\n    this._config = config || {};\n    this._editorActions = editorActions;\n    this._eventBus = eventBus;\n    this._cellSelection = cellSelection;\n\n    this._listeners = [];\n\n    eventBus.on('table.destroy', this._destroy);\n    eventBus.on('table.init', this._init);\n\n    eventBus.on('attach', () => {\n\n      if (this._config.bindTo) {\n        this.bind(config.bindTo);\n      }\n    });\n\n    eventBus.on('detach', this.unbind);\n  }\n\n  _init = () => {\n    this._registerDefaultBindings();\n\n    this._fire('init');\n  }\n\n  _destroy = () => {\n    this._fire('destroy');\n\n    this.unbind();\n    this._listeners = null;\n  }\n\n  // our key handler is a singleton that passes\n  // (keycode, modifiers) to each listener.\n  //\n  // listeners must indicate that they handled a key event\n  // by returning true. This stops the event propagation.\n  //\n  _keyHandler = (event) => {\n\n    var i, l,\n        listeners = this._listeners,\n        code = event.keyCode || event.charCode || -1;\n\n    for (i = 0; (l = listeners[i]); i++) {\n      if (l(code, event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        return;\n      }\n    }\n  }\n\n  bind(node) {\n\n    // make sure that the keyboard is only bound once to the DOM\n    this.unbind();\n\n    this._node = node;\n\n    // bind key events\n    domEvent.bind(node, 'keydown', this._keyHandler, true);\n\n    this._fire('bind');\n  }\n\n  getBinding() {\n    return this._node;\n  }\n\n  unbind = () => {\n    var node = this._node;\n\n    if (node) {\n      this._fire('unbind');\n\n      // unbind key events\n      domEvent.unbind(node, 'keydown', this._keyHandler, true);\n    }\n\n    this._node = null;\n  }\n\n  _fire(event) {\n    this._eventBus.fire('keyboard.' + event, {\n      node: this._node,\n      listeners: this._listeners\n    });\n  }\n\n  _registerDefaultBindings() {\n\n    var listeners = this._listeners;\n\n    var editorActions = this._editorActions;\n\n    var cellSelection = this._cellSelection;\n\n    // init default listeners\n\n    // undo\n    // (CTRL|CMD) + Z\n    function undo(key, modifiers) {\n\n      if (isCmd(modifiers) && !isShift(modifiers) && key === 90) {\n        editorActions.trigger('undo');\n\n        return true;\n      }\n    }\n\n    // redo\n    // CTRL + Y\n    // CMD + SHIFT + Z\n    function redo(key, modifiers) {\n\n      if (\n        isCmd(modifiers) && (\n          key === 89 || (\n            key === 90 && isShift(modifiers)\n          )\n        )\n      ) {\n        editorActions.trigger('redo');\n\n        return true;\n      }\n    }\n\n    listeners.push(undo);\n    listeners.push(redo);\n\n\n    function selectCellAbove(key, event) {\n      if (key !== 13 || isCmd(event) || !isShift(event)) {\n        return;\n      }\n\n      if (!findSelectableAncestor(event.target)) {\n        return;\n      }\n\n      editorActions.trigger('selectCellAbove');\n\n      return true;\n    }\n\n    listeners.push(selectCellAbove);\n\n\n    function selectCellBelow(key, event) {\n\n      if (key !== 13 || isCmd(event) || isShift(event)) {\n        return;\n      }\n\n      if (!findSelectableAncestor(event.target)) {\n        return;\n      }\n\n      const changed = editorActions.trigger('selectCellBelow');\n\n      const selectedCell = cellSelection.getCellSelection();\n\n      // add new rule if no next rule\n      if (!changed && selectedCell && !isDecisionNameCell(selectedCell)) {\n        const rule = editorActions.trigger('addRule');\n\n        editorActions.trigger('selectCellBelow');\n\n        return rule;\n      }\n\n      return true;\n    }\n\n    listeners.push(selectCellBelow);\n  }\n\n\n  /**\n   * Add a listener function that is notified with (key, modifiers) whenever\n   * the keyboard is bound and the user presses a key.\n   *\n   * @param {Function} listenerFn\n   */\n  addListener(listenerFn) {\n    this._listeners.unshift(listenerFn);\n  }\n\n  removeListener(listenerFn) {\n    this._listeners = this._listeners.filter(l => l !== listenerFn);\n  }\n\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus',\n  'editorActions',\n  'cellSelection'\n];\n\n\n// helper /////\nfunction isDecisionNameCell(cell) {\n  return cell === '__decisionProperties_name';\n}\n"],"file":"Keyboard.js"}