function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var COMMANDS = ['row.add', 'row.remove', 'col.add', 'col.remove'];

var ContextMenuCloseBehavior = /*#__PURE__*/_createClass(function ContextMenuCloseBehavior(contextMenu, eventBus) {
  _classCallCheck(this, ContextMenuCloseBehavior);

  eventBus.on('commandStack.executed', function (_ref) {
    var command = _ref.command;

    // close on certain modeling operations
    if (COMMANDS.indexOf(command) !== -1) {
      contextMenu.close();
    }
  }); // always close on undo

  eventBus.on('commandStack.reverted', function () {
    contextMenu.close();
  });
});

export { ContextMenuCloseBehavior as default };
ContextMenuCloseBehavior.$inject = ['contextMenu', 'eventBus'];
//# sourceMappingURL=ContextMenuCloseBehavior.js.map