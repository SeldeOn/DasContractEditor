{"version":3,"sources":["../../../../src/features/copy-cut-paste/key-bindings/CopyCutPasteKeyBindings.js"],"names":["getRange","event","domEvent","getFocusableNode","getNodeById","isCmd","isShift","CopyPasteKeyBindings","injector","eventBus","clipboard","cellSelection","elementRegistry","editorActions","renderer","_clipboard","clear","copy","key","modifiers","cell","_getSelectedCell","_editorActions","trigger","element","col","row","cut","paste","pasted","_cellSelection","selectCell","forEach","l","_keyboard","addListener","_elementRegistry","get","_renderer","on","_registerBindings","bind","document","_clearClipboard","unbind","elementId","getCellSelection","container","getContainer","node","focusableNode","activeElement","range","start","end","$inject"],"mappings":"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","sourcesContent":["import {\n  getRange\n} from 'selection-ranges';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  getFocusableNode,\n  getNodeById\n} from '../../cell-selection/CellSelectionUtil';\n\nimport {\n  isCmd,\n  isShift\n} from '../../keyboard/KeyboardUtil';\n\n\n/**\n * Keybindings for Copy + Paste\n */\nexport default class CopyPasteKeyBindings {\n\n  constructor(\n      injector, eventBus, clipboard,\n      cellSelection, elementRegistry, editorActions,\n      renderer) {\n\n    this._clipboard = clipboard;\n    this._cellSelection = cellSelection;\n    this._elementRegistry = elementRegistry;\n    this._editorActions = editorActions;\n    this._keyboard = injector.get('keyboard', false);\n    this._renderer = renderer;\n\n    if (!this._keyboard) {\n      return;\n    }\n\n    eventBus.on('keyboard.init', this._registerBindings);\n\n    eventBus.on('keyboard.bind', () => {\n      domEvent.bind(document, 'copy', this._clearClipboard, true);\n      domEvent.bind(document, 'cut', this._clearClipboard, true);\n    });\n\n    eventBus.on('keyboard.unbind', () => {\n      domEvent.unbind(document, 'copy', this._clearClipboard, true);\n      domEvent.unbind(document, 'cut', this._clearClipboard, true);\n    });\n  }\n\n  _clearClipboard = () => {\n    this._clipboard.clear();\n  }\n\n  /**\n   * Return the selected cell within the decision table.\n   *\n   * This verifies that a cell ready for copy-or-paste is\n   * actual selected by the user, in the Browser UI.\n   *\n   * @return {Cell}\n   */\n  _getSelectedCell() {\n\n    const elementId = this._cellSelection.getCellSelection();\n\n    // we may have no selection\n    if (!elementId) {\n      return;\n    }\n\n    const cell = this._elementRegistry.get(elementId);\n\n    // selection may not be a cell\n    if (!cell) {\n      return;\n    }\n\n    const container = this._renderer.getContainer();\n\n    const node = getNodeById(elementId, container);\n\n    const focusableNode = getFocusableNode(node);\n\n    // focusable element in selection may not be actual\n    // browser focus, i.e. when a menu is open\n    if (document.activeElement !== focusableNode) {\n      return;\n    }\n\n    const range = getRange(node);\n\n    // user may attempt native copy-paste operation right now\n    // don't interfere with normal text copying\n    if (range && (range.start !== range.end)) {\n      return;\n    }\n\n    return cell;\n  }\n\n\n  _registerBindings = () => {\n\n    // copy\n    // CTRL/CMD + C\n    const copy = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 67)) {\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('copy', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('copy', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // cut\n    // CTRL/CMD + X\n    const cut = (key, modifiers) => {\n\n      if (isCmd(modifiers) && (key === 88)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          this._editorActions.trigger('cut', {\n            element: cell.col\n          });\n        } else {\n          this._editorActions.trigger('cut', {\n            element: cell.row\n          });\n        }\n\n        return true;\n      }\n    };\n\n    // paste\n    // CTRL/CMD + V\n    const paste = (key, modifiers) => {\n\n      let pasted;\n\n      if (isCmd(modifiers) && (key === 86)) {\n\n        const cell = this._getSelectedCell();\n\n        if (!cell) {\n          return;\n        }\n\n        if (isShift(modifiers)) {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.col\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('right');\n          }\n        } else {\n          pasted = this._editorActions.trigger('pasteAfter', {\n            element: cell.row\n          });\n\n          if (pasted) {\n            this._cellSelection.selectCell('below');\n          }\n        }\n      }\n\n      // indicate, whether we could paste\n      return typeof pasted !== 'undefined';\n    };\n\n    // register listeners\n    [ copy, cut, paste ].forEach((l) => {\n      this._keyboard.addListener(l);\n    });\n  }\n\n}\n\n\nCopyPasteKeyBindings.$inject = [\n  'injector',\n  'eventBus',\n  'clipboard',\n  'cellSelection',\n  'elementRegistry',\n  'editorActions',\n  'renderer'\n];"],"file":"CopyCutPasteKeyBindings.js"}