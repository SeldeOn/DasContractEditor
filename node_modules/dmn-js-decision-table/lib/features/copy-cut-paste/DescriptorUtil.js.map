{"version":3,"sources":["../../../src/features/copy-cut-paste/DescriptorUtil.js"],"names":["isArray","forEach","keys","reduce","createHooks","copyTableProperties","copyBusinessObjectProperties","reviveHooks","reviveBusinessObject","reviveTableElement","createDescriptor","element","cache","hooks","createDescriptors0","createDescriptor0","elements","result","currentCache","descriptorCache","currentDescriptors","root","id","descriptor","existingDescriptor","element0","evaluateHooks","create","hook","Row","Col","Cell","newDesc","type","getType","cells0","cells","businessObject","bo0","createBoDescriptor","Error","bo","boCache","existingBoDesc","$type","$descriptor","properties","property","value","name","map","b","value0","reviveDescriptor","entry","reviveCache","reviveDescriptors0","reviveDescriptor0","descriptors","existingElement","evaluateReviveHooks","revive","createCache","elementAttrs","Constructor","getConstructor","newElement","cell","row","col","createBo","boDescriptor","existingBo","newBoAttrs","key","val","val0","_keepIds","_model","ids","assigned","newBo","_dmnFactory","newBoAttr","$parent","a"],"mappings":"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","sourcesContent":["import {\n  isArray,\n  forEach,\n  keys,\n  reduce\n} from 'min-dash';\n\n// creating descriptors //////////\n\nconst createHooks = [\n  copyTableProperties,\n  copyBusinessObjectProperties\n];\n\nconst reviveHooks = [\n  reviveBusinessObject,\n  reviveTableElement\n];\n\n/**\n * Return a serializable snapshot of the given elements.\n *\n * @param {Array<Base>} elements list of table elements\n *\n * @return {Tree} descriptor tree\n */\nexport function createDescriptor(element, cache, hooks) {\n\n  hooks = hooks || createHooks;\n  cache = cache || {};\n\n  if (isArray(element)) {\n    return createDescriptors0(element, cache, hooks);\n  } else {\n    return createDescriptor0(element, cache, hooks);\n  }\n\n}\n\n\n/**\n * Create descriptors of elements, returning { descriptors: [], descriptorCache }.\n *\n * @param {Array<Base>} elements list of table elements\n * @param {Object} cache the create cache\n *\n * @return {Object} new descriptors + updated cache\n */\nfunction createDescriptors0(elements, cache, hooks) {\n\n  return reduce(elements, (result, element) => {\n\n    var currentCache = result.descriptorCache,\n        currentDescriptors = result.root;\n\n    let {\n      root,\n      descriptorCache\n    } = createDescriptor0(element, currentCache, hooks);\n\n    return {\n      root: [\n        ...currentDescriptors,\n        root\n      ],\n      descriptorCache: {\n        ...currentCache,\n        ...descriptorCache\n      }\n    };\n  }, {\n    root: [],\n    descriptorCache: cache\n  });\n}\n\nfunction createDescriptor0(element, cache, hooks) {\n\n  var id = element.id;\n\n  var descriptor = {\n    id: id\n  };\n\n  var elements = cache.elements || {};\n\n  var existingDescriptor = elements[id];\n\n  // element already created; nothing to do\n  if (existingDescriptor) {\n    return {\n      root: existingDescriptor,\n      descriptorCache: cache\n    };\n  }\n\n  // we're new; need to initialize element via hooks\n  // we assume we're not handling recursive data structures\n  // here. Otherwise we'd need to pre-populate the cache\n  // with the given element\n  let element0 = evaluateHooks(element, descriptor, hooks, {\n    ...cache,\n    elements\n  });\n\n  return {\n    root: element0.root,\n    descriptorCache: {\n      ...element0.descriptorCache,\n      elements: {\n        ...element0.descriptorCache.elements,\n        [id]: element0.root\n      }\n    }\n  };\n}\n\n\nfunction evaluateHooks(element, descriptor, hooks, cache) {\n\n  function create(element, descriptorCache) {\n    return createDescriptor(element, descriptorCache, hooks);\n  }\n\n  return reduce(hooks, function(result, hook) {\n    return hook(\n      element,\n      result.root,\n      result.descriptorCache,\n      create\n    );\n  }, {\n    root: descriptor,\n    descriptorCache: cache\n  });\n}\n\n\nimport {\n  Row,\n  Col,\n  Cell\n} from 'table-js/lib/model';\n\n\nfunction copyTableProperties(element, descriptor, cache, create) {\n\n  var descriptorCache = cache;\n\n  var newDesc = {\n    ...descriptor,\n    type: getType(element)\n  };\n\n  if (\n    element instanceof Row ||\n    element instanceof Col\n  ) {\n    let cells0 = create(element.cells, descriptorCache);\n\n    newDesc.cells = cells0.root;\n    descriptorCache = cells0.descriptorCache;\n  }\n\n  return {\n    root: newDesc,\n    descriptorCache\n  };\n}\n\n\nfunction copyBusinessObjectProperties(element, descriptor, cache) {\n\n  var businessObject = element.businessObject;\n\n  if (!businessObject) {\n    return {\n      root: descriptor,\n      descriptorCache: cache\n    };\n  }\n\n  // need to clone businessObject\n  var bo0 = createBoDescriptor(businessObject, cache);\n\n  return {\n    root: {\n      ...descriptor,\n      businessObject: bo0.root\n    },\n    descriptorCache: bo0.descriptorCache\n  };\n}\n\n\nfunction getType(element) {\n\n  if (element instanceof Row) {\n    return 'row';\n  }\n\n  if (element instanceof Col) {\n    return 'col';\n  }\n\n  if (element instanceof Cell) {\n    return 'cell';\n  }\n\n  throw new Error('cannot deduce element type: #' + element.id);\n}\n\n\nfunction createBoDescriptor(bo, cache) {\n  var boCache,\n      existingBoDesc;\n\n  var id = bo.id;\n\n  if (id) {\n    boCache = cache.boCache || {};\n\n    existingBoDesc = boCache[id];\n\n    // businessObject already created; nothing to do\n    if (existingBoDesc) {\n      return {\n        root: existingBoDesc,\n        descriptorCache: cache\n      };\n    }\n  }\n\n  var descriptor = {\n    $type: bo.$type\n  };\n\n  if (id) {\n    descriptor.id = id;\n\n    boCache = {\n      ...boCache,\n      [id]: descriptor\n    };\n\n    cache = {\n      ...cache,\n      boCache\n    };\n  }\n\n  // TODO(nikku): distinguish relations and containment\n  // Need to build up the whole tree and revive relations afterwards\n\n  // ITERATE OVER ALL SET PROPERTIES\n  // (Object.keys(bo) or via bo.$descriptor....)\n\n  bo.$descriptor.properties.forEach(function(property) {\n    var value = bo[property.name];\n\n    // const propertyDescriptor = bo.$model.getPropertyDescriptor(bo, property.name),\n    //       isId = propertyDescriptor.isId,\n    //       isReference = propertyDescriptor.isReference;\n\n    // not set\n    if (!value) {\n      return;\n    }\n\n    // arrays of moddle elements\n    if (isArray(value)) {\n      value = value.map(b => {\n        var value0 = createBoDescriptor(b, cache);\n\n        cache = value0.descriptorCache;\n\n        return value0.root;\n      });\n    }\n\n    // moddle elements\n    if (value.$type) {\n      let value0 = createBoDescriptor(value, cache);\n\n      cache = value0.descriptorCache;\n      value = value0.root;\n    }\n\n    // other values\n    descriptor[property.name] = value;\n  });\n\n  return {\n    root: descriptor,\n    descriptorCache: cache\n  };\n}\n\n\n\n// reviving //////////\n\nexport function reviveDescriptor(entry, reviveCache, hooks) {\n\n  hooks = hooks || reviveHooks;\n  reviveCache = reviveCache || {};\n\n  if (isArray(entry.root)) {\n    return reviveDescriptors0(entry, reviveCache, hooks);\n  } else {\n    return reviveDescriptor0(entry, reviveCache, hooks);\n  }\n}\n\n\n/**\n * TBD: document this!\n *\n * @param  {[type]} entry       [description]\n * @param  {[type]} reviveCache [description]\n * @param  {[type]} hooks       [description]\n * @return {[type]}             [description]\n */\nfunction reviveDescriptors0(entry, reviveCache, hooks) {\n\n  let descriptors = entry.root;\n  let descriptorCache = entry.descriptorCache;\n\n  return reduce(descriptors, (result, element) => {\n\n    var currentCache = result.reviveCache,\n        currentDescriptors = result.root;\n\n    let {\n      root,\n      reviveCache\n    } = reviveDescriptor0({ root: element, descriptorCache }, currentCache, hooks);\n\n    return {\n      root: [\n        ...currentDescriptors,\n        root\n      ],\n      reviveCache\n    };\n  }, {\n    root: [],\n    reviveCache\n  });\n}\n\n/**\n * TBD: document this!\n *\n * @param  {[type]} entry [description]\n * @param  {[type]} cache [description]\n * @param  {[type]} hooks [description]\n * @return {[type]}       [description]\n */\nfunction reviveDescriptor0(entry, reviveCache, hooks) {\n\n  var descriptor = entry.root;\n\n  var id = descriptor.id;\n\n  var elements = reviveCache.elements || {};\n\n  var existingElement = elements[id];\n\n  // element already created; nothing to do\n  if (existingElement) {\n    return {\n      root: existingElement,\n      reviveCache: reviveCache\n    };\n  }\n\n  // start with a fake element; haha <3\n  var element = {\n    id: id\n  };\n\n  // we're new; need to initialize element via hooks\n  let element0 = evaluateReviveHooks(entry, element, hooks, {\n    ...reviveCache,\n    elements\n  });\n\n  return {\n    root: element0.root,\n    reviveCache: {\n      ...element0.reviveCache,\n      elements: {\n        ...element0.reviveCache.elements,\n        [id]: element0.root\n      }\n    }\n  };\n}\n\n// entry = { root, descriptorCache }\n// element = { id: foo }\n// hooks = [ ... ]\n// reviveCache = { ... }\nfunction evaluateReviveHooks(entry, element, hooks, reviveCache) {\n\n  function revive(entry, reviveCache) {\n    return reviveDescriptor(entry, reviveCache, hooks);\n  }\n\n  return reduce(hooks, function(result, hook) {\n    return hook(\n      entry,\n      result.root,\n      result.reviveCache,\n      revive\n    );\n  }, {\n    root: element,\n    reviveCache: reviveCache\n  });\n}\n\n\nfunction reviveTableElement(entry, element, reviveCache, revive) {\n  var descriptor = entry.root;\n  var createCache = entry.descriptorCache;\n\n  var elementAttrs = {\n    ...element\n  };\n\n  // make sure table element ID is same as moddle element ID\n  if (element.businessObject && element.businessObject.id) {\n    elementAttrs.id = element.businessObject.id;\n  }\n\n  if (\n    descriptor.type === 'row' ||\n    descriptor.type === 'col'\n  ) {\n    let cells0 = revive({\n      root: descriptor.cells,\n      descriptorCache: createCache\n    }, reviveCache);\n\n    elementAttrs.cells = cells0.root;\n    reviveCache = cells0.reviveCache;\n  }\n\n  var Constructor = getConstructor(descriptor);\n\n  var newElement = new Constructor(elementAttrs);\n\n  // set parent row or col\n  if (newElement instanceof Row) {\n    newElement.cells.forEach(cell => {\n      cell.row = newElement;\n    });\n  } else if (newElement instanceof Col) {\n    newElement.cells.forEach(cell => {\n      cell.col = newElement;\n    });\n  }\n\n  return {\n    root: newElement,\n    reviveCache\n  };\n}\n\n\nfunction reviveBusinessObject(entry, element, reviveCache) {\n  var businessObject = entry.root.businessObject;\n\n  if (!businessObject) {\n    return {\n      root: element,\n      reviveCache\n    };\n  }\n\n  // need to clone businessObject\n  var bo0 = createBo({\n    root: businessObject,\n    descriptorCache: entry.descriptorCache\n  }, reviveCache);\n\n  return {\n    root: {\n      ...element,\n      businessObject: bo0.root\n    },\n    reviveCache: bo0.reviveCache\n  };\n}\n\n\nfunction getConstructor(descriptor) {\n\n  switch (descriptor.type) {\n  case 'row':\n    return Row;\n  case 'cell':\n    return Cell;\n  case 'col':\n    return Col;\n  default:\n    throw new Error('unknown element type: #' + descriptor.type);\n  }\n}\n\n\nfunction createBo(entry, reviveCache) {\n  var boDescriptor = entry.root;\n\n  var id = boDescriptor.id;\n\n  let boCache,\n      existingBo;\n\n  if (id) {\n    boCache = reviveCache.boCache || {};\n\n    existingBo = boCache[id];\n\n    // businessObject already created; nothing to do\n    if (existingBo) {\n      return {\n        root: existingBo,\n        reviveCache\n      };\n    }\n  }\n\n  var newBoAttrs = {};\n\n  // set attrs for new business object (might include creating other business objects)\n  keys(boDescriptor).forEach(key => {\n    let val,\n        val0;\n\n    if (boDescriptor[key].$type) {\n      val0 = createBo({\n        root: boDescriptor[key]\n      }, reviveCache);\n\n      val = val0.root;\n\n      reviveCache = val0.reviveCache;\n      boCache = reviveCache.boCache || {};\n    } else if (isArray(boDescriptor[key])) {\n      val = boDescriptor[key].map(b => {\n        val0 = createBo({\n          root: b\n        }, reviveCache);\n\n        reviveCache = val0.reviveCache;\n        boCache = reviveCache.boCache || {};\n\n        return val0.root;\n      });\n    } else {\n      val = boDescriptor[key];\n    }\n\n    newBoAttrs[key] = val;\n  });\n\n  const type = newBoAttrs.$type;\n\n  delete newBoAttrs.$type;\n\n  // generate new ID if not supposed to be kept or already assigned\n  if (!reviveCache._keepIds\n    || reviveCache._model.ids.assigned(newBoAttrs.id)) {\n\n    delete newBoAttrs.id;\n  }\n\n  var newBo = reviveCache._dmnFactory.create(type, newBoAttrs);\n\n  // set up $parent relationships for moddle elements\n  forEach(newBoAttrs, newBoAttr => {\n    if (newBoAttr.$type) {\n      newBoAttr.$parent = newBo;\n    }\n\n    if (isArray(newBoAttr)) {\n      newBoAttr.forEach(a => a.$parent = newBo);\n    }\n  });\n\n  if (id) {\n    boCache = {\n      ...boCache,\n      [id]: newBo\n    };\n\n    reviveCache = {\n      ...reviveCache,\n      boCache\n    };\n  }\n\n  return {\n    root: newBo,\n    reviveCache\n  };\n\n}"],"file":"DescriptorUtil.js"}