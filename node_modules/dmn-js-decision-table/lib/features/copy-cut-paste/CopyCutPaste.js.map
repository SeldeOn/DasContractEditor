{"version":3,"sources":["../../../src/features/copy-cut-paste/CopyCutPaste.js"],"names":["isArray","CutHandler","PasteHandler","createDescriptor","CutPaste","clipboard","commandStack","eventBus","modeling","sheet","rules","_clipboard","_commandStack","_eventBus","_modeling","_sheet","_rules","registerHandler","elements","data","fire","set","keepIds","context","execute","element","_paste","before","after","target","position","clipboardData","get","undefined","allowed","clear","$inject"],"mappings":"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","sourcesContent":["import { isArray } from 'min-dash';\r\n\r\nimport CutHandler from './cmd/CutHandler';\r\nimport PasteHandler from './cmd/PasteHandler';\r\n\r\nimport { createDescriptor } from './DescriptorUtil';\r\n\r\n\r\nexport default class CutPaste {\r\n\r\n  constructor(\r\n      clipboard, commandStack, eventBus,\r\n      modeling, sheet, rules) {\r\n\r\n    this._clipboard = clipboard;\r\n    this._commandStack = commandStack;\r\n    this._eventBus = eventBus;\r\n    this._modeling = modeling;\r\n    this._sheet = sheet;\r\n    this._rules = rules;\r\n\r\n    commandStack.registerHandler('cut', CutHandler);\r\n    commandStack.registerHandler('paste', PasteHandler);\r\n  }\r\n\r\n  /**\r\n   * Copy elements.\r\n   *\r\n   * @param {Array} elements - Elements to be copied.\r\n   */\r\n  copy(elements) {\r\n    if (!isArray(elements)) {\r\n      elements = [ elements ];\r\n    }\r\n\r\n    const data = {\r\n      elements: createDescriptor(elements)\r\n    };\r\n\r\n    this._eventBus.fire('copyCutPaste.copy', { data });\r\n\r\n    this._clipboard.set(data);\r\n  }\r\n\r\n  /**\r\n   * Cut elements thereby removing them temporarily.\r\n   *\r\n   * @param {Array} elements - Elements to be cut.\r\n   */\r\n  cut(elements) {\r\n    if (!isArray(elements)) {\r\n      elements = [ elements ];\r\n    }\r\n\r\n    const data = {\r\n      elements: createDescriptor(elements),\r\n      keepIds: true\r\n    };\r\n\r\n    const context = {\r\n      elements,\r\n      data\r\n    };\r\n\r\n    this._eventBus.fire('copyCutPaste.cut', { data });\r\n\r\n    this._commandStack.execute('cut', context);\r\n  }\r\n\r\n  /**\r\n   * Paste rows or cols before row or col.\r\n   *\r\n   * @param {Row|Col} element - Row or col to paste elements before.\r\n   */\r\n  pasteBefore(element) {\r\n    return this._paste(element, { before: true });\r\n  }\r\n\r\n  /**\r\n   * Paste rows or cols after row or col.\r\n   *\r\n   * @param {Row|Col} element - Row or col to paste elements after.\r\n   */\r\n  pasteAfter(element) {\r\n    return this._paste(element, { after: true });\r\n  }\r\n\r\n  /**\r\n   * Basic paste onto given target element.\r\n   */\r\n  _paste(target, position) {\r\n\r\n    const clipboardData = this._clipboard.get();\r\n\r\n    if (!clipboardData) {\r\n      return undefined;\r\n    }\r\n\r\n    const allowed = this._rules.allowed('paste', {\r\n      data: clipboardData.elements,\r\n      target\r\n    });\r\n\r\n    if (!allowed) {\r\n      return false;\r\n    }\r\n\r\n    this._commandStack.execute('paste', {\r\n      element: target,\r\n      ...position\r\n    });\r\n\r\n    // @bpmn-io: Clear clipboard to work around\r\n    // https://github.com/camunda/camunda-modeler/issues/1246 which breaks native copy &\r\n    // paste when row or column is copied or cut\r\n    this._clipboard.clear();\r\n\r\n    // Return true to stop propagation and prevent native paste\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Paste elements at.\r\n   */\r\n  pasteAt(element) {\r\n\r\n    // TODO: implement for pasting cells\r\n  }\r\n}\r\n\r\nCutPaste.$inject = [\r\n  'clipboard',\r\n  'commandStack',\r\n  'eventBus',\r\n  'modeling',\r\n  'sheet',\r\n  'rules'\r\n];\r\n"],"file":"CopyCutPaste.js"}