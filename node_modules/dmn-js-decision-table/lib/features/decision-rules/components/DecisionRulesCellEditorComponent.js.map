{"version":3,"sources":["../../../../src/features/decision-rules/components/DecisionRulesCellEditorComponent.js"],"names":["Component","isString","is","EditableComponent","Cell","DecisionRulesCellEditorComponent","props","context","state","isFocussed","changeCellValue","bind","onFocus","onBlur","onElementsChanged","forceUpdate","injector","cell","changeSupport","_changeSupport","_modeling","get","id","offElementsChanged","value","editCell","businessObject","setState","rowIndex","row","col","colIndex","isUnaryTest","text","TableCellEditor","_expressionLanguages","_translate","expressionLanguage","defaultExpressionLanguage","getDefaultExpressionLanguage","description","getLabel","label","isInputCell","indexOf","elementType","getDefault","getDescription","isDefaultExpressionLanguage","expressionLanguageLabel","getExpressionLanguageLabel","isScript","getClassName","getEditor","className"],"mappings":"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","sourcesContent":["import { Component } from 'inferno';\n\nimport { isString } from 'min-dash';\n\nimport { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';\n\nimport { Cell } from 'table-js/lib/components';\n\n\nexport default class DecisionRulesCellEditorComponent extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isFocussed: false\n    };\n\n    this.changeCellValue = this.changeCellValue.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onElementsChanged = this.onElementsChanged.bind(this);\n  }\n\n\n  onElementsChanged() {\n    this.forceUpdate();\n  }\n\n\n  componentWillMount() {\n    const { injector } = this.context;\n\n    const { cell } = this.props;\n\n    const changeSupport = this._changeSupport = this.context.changeSupport;\n\n    this._modeling = injector.get('modeling');\n\n    changeSupport.onElementsChanged(cell.id, this.onElementsChanged);\n  }\n\n\n  componentWillUnmount() {\n    const { cell } = this.props;\n\n    this._changeSupport.offElementsChanged(cell.id, this.onElementsChanged);\n  }\n\n\n  changeCellValue(value) {\n    const { cell } = this.props;\n\n    this._modeling.editCell(cell.businessObject, value);\n  }\n\n\n  onFocus() {\n    this.setState({\n      isFocussed: true\n    });\n  }\n\n\n  onBlur() {\n    this.setState({\n      isFocussed: false\n    });\n  }\n\n\n  render() {\n    const {\n      cell,\n      rowIndex,\n      row,\n      col,\n      colIndex\n    } = this.props;\n\n    const { isFocussed } = this.state;\n\n    const isUnaryTest = is(cell, 'dmn:UnaryTests');\n    const businessObject = cell.businessObject;\n\n    return (\n      <Cell\n        className={ isUnaryTest ? 'input-cell' : 'output-cell' }\n        elementId={ cell.id }\n        coords={ `${rowIndex}:${colIndex}` }\n        data-row-id={ row.id }\n        data-col-id={ col.id }\n      >\n        <TableCellEditor\n          className=\"cell-editor\"\n          placeholder={ isUnaryTest ? '-' : '' }\n          ctrlForNewline={ true }\n          onFocus={ this.onFocus }\n          onBlur={ this.onBlur }\n          isFocussed={ isFocussed }\n          onChange={ this.changeCellValue }\n          value={ businessObject.text }\n          businessObject={ businessObject } />\n      </Cell>\n    );\n  }\n}\n\n\nclass TableCellEditor extends EditableComponent {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this._expressionLanguages = context.injector.get('expressionLanguages');\n    this._translate = context.injector.get('translate');\n  }\n\n  isDefaultExpressionLanguage(businessObject) {\n    const { expressionLanguage } = businessObject;\n\n    const defaultExpressionLanguage = this.getDefaultExpressionLanguage(\n      businessObject\n    ).value;\n\n    return !expressionLanguage || expressionLanguage === defaultExpressionLanguage;\n  }\n\n  getDescription(businessObject) {\n    return businessObject.description;\n  }\n\n  getExpressionLanguageLabel(businessObject) {\n    const { expressionLanguage } = businessObject;\n\n    const defaultExpressionLanguage = this.getDefaultExpressionLanguage(businessObject);\n\n    return this._expressionLanguages.getLabel(expressionLanguage) ||\n      defaultExpressionLanguage.label;\n  }\n\n  isScript(businessObject) {\n    const defaultExpressionLanguage = this.getDefaultExpressionLanguage(businessObject);\n\n    const isInputCell = is(businessObject, 'dmn:UnaryTests');\n\n    if (!isInputCell) {\n      return false;\n    }\n\n    if (businessObject.text.indexOf('\\n') !== -1) {\n      return true;\n    }\n\n    return businessObject.expressionLanguage &&\n      businessObject.expressionLanguage !== defaultExpressionLanguage;\n  }\n\n  getDefaultExpressionLanguage(businessObject) {\n    const elementType = is(businessObject, 'dmn:UnaryTests') ? 'inputCell' : 'outputCell';\n\n    return this._expressionLanguages.getDefault(elementType);\n  }\n\n  render() {\n    const {\n      businessObject,\n      isFocussed\n    } = this.props;\n\n    const description = this.getDescription(businessObject);\n\n    const isDefaultExpressionLanguage = this.isDefaultExpressionLanguage(businessObject);\n\n    const expressionLanguageLabel = this.getExpressionLanguageLabel(businessObject);\n\n    const isScript = this.isScript(businessObject);\n\n    return (\n      <div className={ this.getClassName() }>\n        {\n          isString(description)\n            && !isFocussed\n            && <div className=\"description-indicator\"></div>\n        }\n        {\n          this.getEditor({\n            className: isScript ? 'script-editor' : null\n          })\n        }\n        {\n          !isDefaultExpressionLanguage &&\n          !isFocussed && (\n            <span\n              className=\"dms-badge dmn-expression-language\"\n              title={ this._translate(\n                'Expression Language = {expressionLanguageLabel}',\n                { expressionLanguageLabel }\n              ) }>\n              <span class=\"dms-badge-icon dmn-icon-file-code\"></span>\n              <span class=\"dms-badge-label\">{ expressionLanguageLabel }</span>\n            </span>\n          )\n        }\n      </div>\n    );\n  }\n}\n"],"file":"DecisionRulesCellEditorComponent.js"}