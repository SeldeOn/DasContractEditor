{"version":3,"sources":["../../../../src/features/decision-table-head/components/DecisionTableHead.js"],"names":["is","getBusinessObject","Component","mixin","ComponentWithSlots","DecisionTableHead","props","context","forceUpdate","_sheet","injector","get","_changeSupport","changeSupport","root","getRoot","onElementsChanged","id","offElementsChanged","businessObject","inputs","input","outputs","output","slotFills","type","cellType","map","index","width","slotFill","inputsLength","length","key","DefaultInputHeaderCell","outputsLength","DefaultOutputHeaderCell","className","label","inputExpression","inputValues","translate","actualClassName","text","typeRef","name","outputValues"],"mappings":"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","sourcesContent":["import {\n  is,\n  getBusinessObject\n} from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport { Component } from 'inferno';\n\nimport {\n  mixin\n} from 'table-js/lib/components';\n\nimport {\n  ComponentWithSlots\n} from 'dmn-js-shared/lib/components/mixins';\n\n\nexport default class DecisionTableHead extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    mixin(this, ComponentWithSlots);\n\n    this._sheet = context.injector.get('sheet');\n\n    this._changeSupport = context.changeSupport;\n  }\n\n  onElementsChanged = () => {\n    this.forceUpdate();\n  }\n\n  componentWillMount() {\n    const root = this._sheet.getRoot();\n\n    this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);\n  }\n\n  componentWillUnmount() {\n    const root = this._sheet.getRoot();\n\n    this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);\n  }\n\n  render() {\n    const root = this._sheet.getRoot();\n\n    if (!is(root, 'dmn:DMNElement')) {\n      return null;\n    }\n\n    const businessObject = getBusinessObject(root);\n\n    const inputs = businessObject.input,\n          outputs = businessObject.output;\n\n    return <thead>\n      <tr>\n        <th\n          className=\"index-column\"\n        />\n\n        {\n          this.slotFills({\n            type: 'cell',\n            context: { cellType: 'before-label-cells' }\n          })\n        }\n\n        {\n          inputs && inputs.map((input, index) => {\n            const width = input.width || '192px';\n\n            return this.slotFill({\n              type: 'cell',\n              context: {\n                cellType: 'input-header',\n                input,\n                index,\n                inputsLength: inputs.length,\n                width\n              },\n              key: input.id\n            }, DefaultInputHeaderCell);\n          })\n        }\n        {\n          outputs.map((output, index) => {\n            return this.slotFill({\n              type: 'cell',\n              context: {\n                cellType: 'output-header',\n                output,\n                index,\n                outputsLength: outputs.length\n              },\n              key: output.id\n            }, DefaultOutputHeaderCell);\n          })\n        }\n\n        {\n          this.slotFills({\n            type: 'cell',\n            context: { cellType: 'after-label-cells' }\n          })\n        }\n      </tr>\n    </thead>;\n  }\n}\n\n\n// default components ///////////////////////\n\nfunction DefaultInputHeaderCell(props, context) {\n\n  const {\n    input,\n    className,\n    index\n  } = props;\n\n  const {\n    label,\n    inputExpression,\n    inputValues\n  } = input;\n\n  const translate = context.injector.get('translate');\n\n  const actualClassName = (className || '') + ' input-cell';\n\n  return (\n    <th\n      data-col-id={ input.id }\n      className={ actualClassName }\n      key={ input.id }>\n\n      <div className=\"clause\">\n        { index === 0 ? translate('When') : translate('And') }\n      </div>\n\n      {\n        label ? (\n          <div className=\"input-label\" title={ translate('Input Label') }>\n            { label }\n          </div>\n        ) : (\n          <div\n            className=\"input-expression\"\n            title={ translate('Input Expression') }>\n            { inputExpression.text }\n          </div>\n        )\n      }\n\n      <div\n        className=\"input-variable\"\n        title={\n          inputValues && inputValues.text ? translate('Input Values') :\n            translate('Input Type')\n        }\n      >\n        { inputValues && inputValues.text || inputExpression.typeRef }\n      </div>\n    </th>\n  );\n}\n\n\nfunction DefaultOutputHeaderCell(props, context) {\n\n  const {\n    output,\n    className,\n    index\n  } = props;\n\n  const {\n    label,\n    name,\n    outputValues,\n    typeRef\n  } = output;\n\n  const translate = context.injector.get('translate');\n\n  const actualClassName = (className || '') + ' output-cell';\n\n  return (\n    <th className={ actualClassName } key={ output.id }>\n\n      <div className=\"clause\">\n        { index === 0 ? translate('Then') : translate('And') }\n      </div>\n\n      {\n        label ? (\n          <div className=\"output-label\" title={ translate('Output Label') }>\n            { label }\n          </div>\n        ) : (\n          <div\n            className=\"output-name\"\n            title={ translate('Output Name') }>\n            { name }\n          </div>\n        )\n      }\n\n      <div\n        className=\"output-variable\"\n        title={\n          outputValues && outputValues.text ? translate('Output Values') :\n            translate('Output Type')\n        }\n      >\n        { outputValues && outputValues.text || typeRef }\n      </div>\n    </th>\n  );\n}\n"],"file":"DecisionTableHead.js"}