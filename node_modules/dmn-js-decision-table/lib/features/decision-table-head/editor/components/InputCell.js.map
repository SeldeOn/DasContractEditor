{"version":3,"sources":["../../../../../src/features/decision-table-head/editor/components/InputCell.js"],"names":["Component","mixin","ComponentWithSlots","InputCell","props","context","event","input","_eventBus","fire","id","forceUpdate","_translate","injector","get","_changeSupport","changeSupport","_sheet","_elementRegistry","root","getRoot","onElementsChanged","offElementsChanged","index","inputsLength","inputExpression","inputValues","label","width","slotFills","type","cellType","col","text","typeRef","onClick","onContextmenu"],"mappings":"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","sourcesContent":["import { Component } from 'inferno';\n\nimport {\n  mixin\n} from 'table-js/lib/components';\n\nimport {\n  ComponentWithSlots\n} from 'dmn-js-shared/lib/components/mixins';\n\n\nexport default class InputCell extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    mixin(this, ComponentWithSlots);\n\n    this._translate = context.injector.get('translate');\n  }\n\n  onClick = (event) => {\n    const { input } = this.props;\n\n    this._eventBus.fire('input.edit', {\n      event,\n      input\n    });\n  }\n\n  onContextmenu = (event) => {\n    const { id } = this.props.input;\n\n    this._eventBus.fire('cell.contextmenu', {\n      event,\n      id\n    });\n  }\n\n  onElementsChanged = () => {\n    this.forceUpdate();\n  }\n\n  componentWillMount() {\n    const { injector } = this.context;\n\n    this._changeSupport = this.context.changeSupport;\n    this._sheet = injector.get('sheet');\n    this._eventBus = injector.get('eventBus');\n    this._elementRegistry = injector.get('elementRegistry');\n\n    const root = this._sheet.getRoot();\n\n    const { input } = this.props;\n\n    this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);\n    this._changeSupport.onElementsChanged(input.id, this.onElementsChanged);\n  }\n\n  componentWillUnmount() {\n    const root = this._sheet.getRoot();\n\n    const { input } = this.props;\n\n    this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);\n    this._changeSupport.offElementsChanged(input.id, this.onElementsChanged);\n  }\n\n  render() {\n    const {\n      input,\n      index,\n      inputsLength\n    } = this.props;\n\n    const {\n      inputExpression,\n      inputValues\n    } = input;\n\n    const label = input.get('label');\n\n    const width = input.width ? input.width + 'px' : '192px';\n\n    return (\n      <th\n        data-col-id={ input.id }\n        onDoubleClick={ this.onClick }\n        onContextmenu={ this.onContextmenu }\n        className=\"input-cell input-editor\"\n        style={ { width } }\n      >\n\n        {\n          this.slotFills({\n            type: 'cell-inner',\n            context: {\n              cellType: 'input-cell',\n              col: this._elementRegistry.get(input.id),\n              index,\n              inputsLength\n            },\n            col: input\n          })\n        }\n\n        <div className=\"clause\">\n          { index === 0 ? this._translate('When') : this._translate('And') }\n        </div>\n\n        {\n          label ? (\n            <div className=\"input-label\" title={ this._translate('Input Label') }>\n              { label }\n            </div>\n          ) : (\n            <div\n              className=\"input-expression\"\n              title={ this._translate('Input Expression') }>\n              { inputExpression.text }\n            </div>\n          )\n        }\n\n        <div\n          className=\"input-variable\"\n          title={\n            inputValues && inputValues.text ? this._translate('Input Values') :\n              this._translate('Input Type')\n          }\n        >\n          { inputValues && inputValues.text || inputExpression.typeRef }\n        </div>\n      </th>\n    );\n  }\n\n}"],"file":"InputCell.js"}