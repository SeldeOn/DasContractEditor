{"version":3,"sources":["../../../../../src/features/decision-table-head/editor/components/OutputCellContextMenu.js"],"names":["Component","OutputEditor","inject","OutputCellContextMenu","props","context","output","unsaved","state","modeling","updateProperties","setState","changes","persistChanges","debounceInput","attr","get","getValue","handleChange","$inject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SACEC,MADF,QAEO,yBAFP;;IAKqBC,qB;;;;;AAEnB,iCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAC1B,8BAAMD,KAAN,EAAaC,OAAb;;AAD0B,qEAUX,YAAM;AACrB,UAAQC,MAAR,GAAmB,MAAKF,KAAL,CAAWC,OAA9B,CAAQC,MAAR;AAEA,UAAQC,OAAR,GAAoB,MAAKC,KAAzB,CAAQD,OAAR;;AAEA,UAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAED,YAAKE,QAAL,CAAcC,gBAAd,CAA+BJ,MAA/B,EAAuCC,OAAvC;;AAEA,YAAKI,QAAL,CAAc;AACZJ,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAxB2B;;AAAA,mEA0Bb,UAACK,OAAD,EAAa;AAC1B,YAAKD,QAAL,CAAc;AACZJ,QAAAA,OAAO,kCACF,MAAKC,KAAL,CAAWD,OADT,GAEFK,OAFE;AADK,OAAd,EAKG,MAAKC,cALR;AAMD,KAjC2B;;AAG1B,UAAKL,KAAL,GAAa,EAAb;AAEAN,IAAAA,MAAM,+BAAN;AAEA,UAAKW,cAAL,GAAsB,MAAKC,aAAL,CAAmB,MAAKD,cAAxB,CAAtB;AAP0B;AAQ3B;;;;WA2BD,kBAASE,IAAT,EAAe;AACb,UAAQT,MAAR,GAAmB,KAAKF,KAAL,CAAWC,OAA9B,CAAQC,MAAR;AAEA,UAAQC,OAAR,GAAoB,KAAKC,KAAzB,CAAQD,OAAR;AAEA,aAAOA,OAAO,IAAIQ,IAAI,IAAIR,OAAnB,GAA6BA,OAAO,CAACQ,IAAD,CAApC,GAA6CT,MAAM,CAACU,GAAP,CAAWD,IAAX,CAApD;AACD;;;WAED,kBAAS;AACP;AAAA,gBAEW,KAAKE,QAAL,CAAc,MAAd,CAFX;AAAA,iBAGY,KAAKA,QAAL,CAAc,OAAd,CAHZ;AAAA,oBAIe,KAAKC;AAJpB;AAMD;;;;EApDgDlB,S;;SAA9BG,qB;AAuDrBA,qBAAqB,CAACgB,OAAtB,GAAgC,CAC9B,eAD8B,EAE9B,UAF8B,CAAhC","sourcesContent":["import { Component } from 'inferno';\n\nimport OutputEditor from './OutputEditor';\n\nimport {\n  inject\n} from 'table-js/lib/components';\n\n\nexport default class OutputCellContextMenu extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {};\n\n    inject(this);\n\n    this.persistChanges = this.debounceInput(this.persistChanges);\n  }\n\n  persistChanges = () => {\n    const { output } = this.props.context;\n\n    const { unsaved } = this.state;\n\n    if (!unsaved) {\n      return;\n    }\n\n    this.modeling.updateProperties(output, unsaved);\n\n    this.setState({\n      unsaved: false\n    });\n  }\n\n  handleChange = (changes) => {\n    this.setState({\n      unsaved: {\n        ...this.state.unsaved,\n        ...changes\n      }\n    }, this.persistChanges);\n  };\n\n  getValue(attr) {\n    const { output } = this.props.context;\n\n    const { unsaved } = this.state;\n\n    return unsaved && attr in unsaved ? unsaved[attr] : output.get(attr);\n  }\n\n  render() {\n    return (\n      <OutputEditor\n        name={ this.getValue('name') }\n        label={ this.getValue('label') }\n        onChange={ this.handleChange } />\n    );\n  }\n}\n\nOutputCellContextMenu.$inject = [\n  'debounceInput',\n  'modeling'\n];"],"file":"OutputCellContextMenu.js"}