{"version":3,"sources":["../../../src/features/modeling/DmnUpdater.js"],"names":["is","CommandInterceptor","DmnUpdater","eventBus","sheet","executed","ifDmn","e","context","element","row","col","updateRoot","oldRoot","reverted","newRoot","root","businessObject","oldTable","oldRules","get","oldIdx","indexOf","splice","$parent","newTable","newIdx","rows","cells","forEach","cell","idx","wireCell","collection","collectionIdx","inputs","outputs","Error","cel","rowIdx","unwireCell","colIdx","cols","length","oldRow","cellBo","oldRowBo","inputEntries","outputEntries","rowBo","$inject","fn","event"],"mappings":"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","sourcesContent":["import { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\n\n/**\n * A handler responsible for updating the underlying DMN\n * once changes on the table happen.\n */\nexport default class DmnUpdater extends CommandInterceptor {\n\n  constructor(eventBus, sheet) {\n    super(eventBus);\n\n    this.executed([\n      'row.add',\n      'row.remove',\n      'col.add',\n      'col.remove'\n    ], ifDmn((e) => {\n      var context = e.context;\n\n      var element = context.row || context.col;\n\n      this.updateRoot(element, context.oldRoot);\n    }));\n\n    this.reverted([\n      'row.add',\n      'row.remove',\n      'col.add',\n      'col.remove'\n    ], ifDmn((e) => {\n      var context = e.context;\n\n      var element = context.row || context.col;\n\n      this.updateRoot(element, context.newRoot);\n    }));\n\n  }\n\n  updateRoot(element, oldRoot) {\n\n    var newRoot = element.root;\n\n    var businessObject = element.businessObject;\n\n    if (is(element, 'dmn:DecisionRule')) {\n\n      // we're removing\n      if (oldRoot) {\n        let oldTable = oldRoot.businessObject;\n\n        let oldRules = oldTable.get('rule');\n        let oldIdx = oldRules.indexOf(businessObject);\n\n        // unwire Row <-> Table\n        oldRules.splice(oldIdx, 1);\n        businessObject.$parent = null;\n      }\n\n      // we're adding\n      if (newRoot) {\n        let newTable = newRoot.businessObject;\n\n        let newIdx = newRoot.rows.indexOf(element);\n\n        // wire Row <-> Table\n        newTable.get('rule').splice(newIdx, 0, businessObject);\n        businessObject.$parent = newTable;\n\n        element.cells.forEach((cell, idx) => {\n\n          // wire Cell <-> Row\n          this.wireCell(cell, element, idx);\n        });\n      }\n    }\n\n\n    if (is(element, 'dmn:InputClause') || is(element, 'dmn:OutputClause')) {\n\n      let collection,\n          collectionIdx;\n\n      // we're removing\n      if (oldRoot) {\n        let oldTable = oldRoot.businessObject;\n\n        let inputs = oldTable.get('input');\n        let outputs = oldTable.get('output');\n\n        if (is(element, 'dmn:InputClause')) {\n          collection = inputs;\n          collectionIdx = inputs.indexOf(businessObject);\n        }\n\n        if (is(element, 'dmn:OutputClause')) {\n          collection = outputs;\n          collectionIdx = outputs.indexOf(businessObject);\n        }\n\n        if (collectionIdx === -1) {\n          throw new Error('inconsistent model: clause not in table');\n        }\n\n        // unwire Col <-> Table\n        collection.splice(collectionIdx, 1);\n        businessObject.$parent = null;\n\n        element.cells.forEach((cel, rowIdx) => {\n\n          // unwire Cell <-> Row\n          this.unwireCell(cel, oldRoot.rows[rowIdx]);\n        });\n\n      }\n\n\n      if (newRoot) {\n        let newTable = newRoot.businessObject;\n\n        let inputs = newTable.get('input');\n        let outputs = newTable.get('output');\n\n        let colIdx = newRoot.cols.indexOf(element);\n\n        let collectionIdx,\n            collection;\n\n        if (is(element, 'dmn:InputClause')) {\n          collection = inputs;\n          collectionIdx = colIdx;\n        }\n\n        if (is(element, 'dmn:OutputClause')) {\n          collection = outputs;\n          collectionIdx = colIdx - inputs.length;\n        }\n\n        // wire Col <-> Table\n        collection.splice(collectionIdx, 0, businessObject);\n        businessObject.$parent = newTable;\n\n        element.cells.forEach((cell, rowIdx) => {\n\n          // wire Cell <-> Row\n          this.wireCell(cell, newRoot.rows[rowIdx], colIdx);\n        });\n\n      }\n    }\n  }\n\n  unwireCell(cell, oldRow) {\n\n    var cellBo = cell.businessObject;\n\n    let oldRowBo = oldRow.businessObject;\n\n    let inputEntries = oldRowBo.get('inputEntry');\n    let outputEntries = oldRowBo.get('outputEntry');\n\n    let collection,\n        collectionIdx;\n\n    // remove from inputEntries\n    if (is(cell, 'dmn:UnaryTests')) {\n      collection = inputEntries;\n    }\n\n    // remove from outputEntries\n    if (is(cell, 'dmn:LiteralExpression')) {\n      collection = outputEntries;\n    }\n\n    collectionIdx = collection.indexOf(cellBo);\n\n    if (collectionIdx === -1) {\n      throw new Error('cell not in row');\n    }\n\n    // unwire Cell <-> Row relationship\n    collection.splice(collectionIdx, 1);\n    cellBo.$parent = null;\n  }\n\n  wireCell(cell, row, colIdx) {\n\n    var cellBo = cell.businessObject;\n\n    let rowBo = row.businessObject;\n\n    let inputEntries = rowBo.get('inputEntry');\n    let outputEntries = rowBo.get('outputEntry');\n\n    let collection,\n        collectionIdx;\n\n    // ensure we handle already wired cells\n    if (cellBo.$parent === rowBo) {\n      return;\n    }\n\n    // add to inputEntries\n    if (is(cell, 'dmn:UnaryTests')) {\n      collection = inputEntries;\n      collectionIdx = colIdx;\n    }\n\n    // add to outputEntries\n    if (is(cell, 'dmn:LiteralExpression')) {\n      collection = outputEntries;\n      collectionIdx = colIdx - inputEntries.length;\n    }\n\n    // wire Cell <-> Row relationship\n    collection.splice(collectionIdx, 0, cellBo);\n    cellBo.$parent = rowBo;\n  }\n\n}\n\nDmnUpdater.$inject = [\n  'eventBus',\n  'sheet'\n];\n\n\n\n// helpers //////////////////////\n\n/**\n * Make sure the event listener is only called\n * if the touched element is a DMN element.\n *\n * @param  {Function} fn\n * @return {Function} guarded function\n */\nfunction ifDmn(fn) {\n\n  return function(event) {\n\n    var context = event.context,\n        element = context.row || context.col;\n\n    if (is(element, 'dmn:DMNElement')) {\n      fn(event);\n    }\n  };\n}"],"file":"DmnUpdater.js"}