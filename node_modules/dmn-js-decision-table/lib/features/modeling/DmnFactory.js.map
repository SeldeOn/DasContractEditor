{"version":3,"sources":["../../../src/features/modeling/DmnFactory.js"],"names":["is","DmnFactory","moddle","_model","type","attrs","element","create","inputExpression","typeRef","$parent","text","_ensureId","prefix","$type","replace","id","_needsId","ids","nextPrefixed","$inject"],"mappings":";;;;;;AAAA,SAASA,EAAT,QAAmB,kCAAnB;;IAGqBC,U;AAEnB,sBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKC,MAAL,GAAcD,MAAd;AACD;;;;WAED,gBAAOE,IAAP,EAAyB;AAAA,UAAZC,KAAY,uEAAJ,EAAI;;AAEvB,UAAIC,OAAO,GAAG,KAAKH,MAAL,CAAYI,MAAZ,CAAmBH,IAAnB,EAAyBC,KAAK,IAAI,EAAlC,CAAd;;AAEA,UAAIL,EAAE,CAACM,OAAD,EAAU,iBAAV,CAAN,EAAoC;AAElC,YAAID,KAAK,CAACG,eAAV,EAA2B;AACzBF,UAAAA,OAAO,CAACE,eAAR,GAA0BH,KAAK,CAACG,eAAhC;AACD,SAFD,MAEO;AACLF,UAAAA,OAAO,CAACE,eAAR,GAA0B,KAAKD,MAAL,CAAY,uBAAZ,EAAqC;AAC7DE,YAAAA,OAAO,EAAE;AADoD,WAArC,CAA1B;AAIAH,UAAAA,OAAO,CAACE,eAAR,CAAwBE,OAAxB,GAAkCJ,OAAlC;AACD;AAEF;;AAED,UAAIN,EAAE,CAACM,OAAD,EAAU,kBAAV,CAAN,EAAqC;AACnCA,QAAAA,OAAO,CAACG,OAAR,GAAkBJ,KAAK,CAACI,OAAN,IAAiB,QAAnC;AACD;;AAED,UAAIT,EAAE,CAACM,OAAD,EAAU,gBAAV,CAAF,IACAN,EAAE,CAACM,OAAD,EAAU,uBAAV,CADN,EAC0C;AAExCA,QAAAA,OAAO,CAACK,IAAR,GAAeN,KAAK,CAACM,IAAN,IAAc,EAA7B;AACD;;AAED,WAAKC,SAAL,CAAeN,OAAf;;AAEA,aAAOA,OAAP;AACD;;;WAED,kBAASA,OAAT,EAAkB;AAChB,aAAON,EAAE,CAACM,OAAD,EAAU,gBAAV,CAAT;AACD;;;WAED,mBAAUA,OAAV,EAAmB;AAEjB;AACA;AACA,UAAIO,MAAM,GAAG,CAACP,OAAO,CAACQ,KAAR,IAAiB,EAAlB,EAAsBC,OAAtB,CAA8B,UAA9B,EAA0C,EAA1C,IAAgD,GAA7D;;AAEA,UAAI,CAACT,OAAO,CAACU,EAAT,IAAe,KAAKC,QAAL,CAAcX,OAAd,CAAnB,EAA2C;AACzCA,QAAAA,OAAO,CAACU,EAAR,GAAa,KAAKb,MAAL,CAAYe,GAAZ,CAAgBC,YAAhB,CAA6BN,MAA7B,EAAqCP,OAArC,CAAb;AACD;AACF;;;;;;SApDkBL,U;AAwDrBA,UAAU,CAACmB,OAAX,GAAqB,CAAE,QAAF,CAArB","sourcesContent":["import { is } from 'dmn-js-shared/lib/util/ModelUtil';\n\n\nexport default class DmnFactory {\n\n  constructor(moddle) {\n    this._model = moddle;\n  }\n\n  create(type, attrs = {}) {\n\n    var element = this._model.create(type, attrs || {});\n\n    if (is(element, 'dmn:InputClause')) {\n\n      if (attrs.inputExpression) {\n        element.inputExpression = attrs.inputExpression;\n      } else {\n        element.inputExpression = this.create('dmn:LiteralExpression', {\n          typeRef: 'string'\n        });\n\n        element.inputExpression.$parent = element;\n      }\n\n    }\n\n    if (is(element, 'dmn:OutputClause')) {\n      element.typeRef = attrs.typeRef || 'string';\n    }\n\n    if (is(element, 'dmn:UnaryTests') ||\n        is(element, 'dmn:LiteralExpression')) {\n\n      element.text = attrs.text || '';\n    }\n\n    this._ensureId(element);\n\n    return element;\n  }\n\n  _needsId(element) {\n    return is(element, 'dmn:DMNElement');\n  }\n\n  _ensureId(element) {\n\n    // generate semantic ids for elements\n    // dmn:UnaryTests -> UnaryTests_ID\n    var prefix = (element.$type || '').replace(/^[^:]*:/g, '') + '_';\n\n    if (!element.id && this._needsId(element)) {\n      element.id = this._model.ids.nextPrefixed(prefix, element);\n    }\n  }\n\n}\n\nDmnFactory.$inject = [ 'moddle' ];"],"file":"DmnFactory.js"}