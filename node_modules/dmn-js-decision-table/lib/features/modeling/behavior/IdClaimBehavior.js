function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';
import { isArray } from 'min-dash';

var IdClaimBehavior = /*#__PURE__*/function (_CommandInterceptor) {
  _inherits(IdClaimBehavior, _CommandInterceptor);

  var _super = _createSuper(IdClaimBehavior);

  function IdClaimBehavior(eventBus, moddle, modeling) {
    var _this;

    _classCallCheck(this, IdClaimBehavior);

    _this = _super.call(this, eventBus);
    _this._ids = moddle.ids;
    _this._modeling = modeling;

    _this.preExecute(['row.add', 'col.add'], function (event) {
      var context = event.context,
          element = context.row || context.col;

      _this.claimId(element.businessObject);

      if (element.cells) {
        element.cells.forEach(function (cell) {
          return _this.claimId(cell.businessObject);
        });
      }
    });

    return _this;
  }

  _createClass(IdClaimBehavior, [{
    key: "claimId",
    value: function claimId(businessObject) {
      var _this2 = this;

      if (businessObject.id && !this._ids.assigned(businessObject.id)) {
        this._modeling.claimId(businessObject.id, businessObject);
      }

      businessObject.$descriptor.properties.forEach(function (property) {
        var value = businessObject[property.name]; // not set

        if (!value) {
          return;
        } // array of moddle elements


        if (isArray(value)) {
          value.forEach(function (v) {
            return _this2.claimId(v);
          });
        } // moddle element


        if (value.$type) {
          _this2.claimId(value);
        }
      });
    }
  }]);

  return IdClaimBehavior;
}(CommandInterceptor);

export { IdClaimBehavior as default };
IdClaimBehavior.$inject = ['eventBus', 'moddle', 'modeling'];
//# sourceMappingURL=IdClaimBehavior.js.map