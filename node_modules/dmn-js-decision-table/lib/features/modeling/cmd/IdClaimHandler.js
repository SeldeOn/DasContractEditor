function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var IdClaimHandler = /*#__PURE__*/function () {
  function IdClaimHandler(moddle) {
    _classCallCheck(this, IdClaimHandler);

    this._moddle = moddle;
  }
  /**
   * <do>
   */


  _createClass(IdClaimHandler, [{
    key: "execute",
    value: function execute(context) {
      var ids = this._moddle.ids,
          id = context.id,
          element = context.element,
          claiming = context.claiming;

      if (claiming) {
        ids.claim(id, element);
      } else {
        ids.unclaim(id);
      }
    }
    /**
     * <undo>
     */

  }, {
    key: "revert",
    value: function revert(context) {
      var ids = this._moddle.ids,
          id = context.id,
          element = context.element,
          claiming = context.claiming;

      if (claiming) {
        ids.unclaim(id);
      } else {
        ids.claim(id, element);
      }
    }
  }]);

  return IdClaimHandler;
}();

export { IdClaimHandler as default };
IdClaimHandler.$inject = ['moddle'];
//# sourceMappingURL=IdClaimHandler.js.map