{"version":3,"sources":["../../../src/features/simple-number-edit/Utils.js"],"names":["keys","COMPARISON_REGULAR_EXPRESSION","RANGE_REGULAR_EXPRESSION","operators","equals","less","lessEquals","greater","greaterEquals","getOperatorName","string","filter","key","parseString","isEmptyString","trim","type","comparisonMatches","match","rangeMatches","isNumber","value","parseFloat","operator","isComparison","values","map","start","end","matches","getComparisonString","comparisonOperator","comparisonValue","getRangeString","rangeStartValue","rangeEndValue","rangeStartType","rangeEndType","rangeStartChar","rangeEndChar"],"mappings":"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","sourcesContent":["import { keys } from 'min-dash';\r\n\r\n// eslint-disable-next-line\r\nconst COMPARISON_REGULAR_EXPRESSION = /^(-?(?:[0-9]|\\.[0-9])+)$|^((?:<|>|=){0,2})\\s*(-?(?:[0-9]|\\.[0-9])+)$/;\r\n\r\n// eslint-disable-next-line\r\nconst RANGE_REGULAR_EXPRESSION = /^(\\[|\\]){1}(-?(?:[0-9]|\\.[0-9])+){1,}\\.\\.(-?(?:[0-9]|\\.[0-9])+){1,}(\\[|\\]){1}$/;\r\n\r\nexport const operators = {\r\n  equals: '=',\r\n  less: '<',\r\n  lessEquals: '<=',\r\n  greater: '>',\r\n  greaterEquals: '>='\r\n};\r\n\r\nfunction getOperatorName(string) {\r\n  return keys(operators).filter(key => {\r\n    return string === operators[ key ];\r\n  })[0];\r\n}\r\n\r\nexport function parseString(string) {\r\n  if (!string || isEmptyString(string.trim())) {\r\n    return {\r\n      type: 'comparison'\r\n    };\r\n  }\r\n\r\n  const comparisonMatches = string.match(COMPARISON_REGULAR_EXPRESSION),\r\n        rangeMatches = string.match(RANGE_REGULAR_EXPRESSION);\r\n\r\n  if (comparisonMatches) {\r\n    if (isNumber(comparisonMatches)) {\r\n      return {\r\n        type: 'comparison',\r\n        value: parseFloat(comparisonMatches[1]),\r\n        operator: 'equals'\r\n      };\r\n    } else if (isComparison(comparisonMatches)) {\r\n      return {\r\n        type: 'comparison',\r\n        value: parseFloat(comparisonMatches[3]),\r\n        operator: getOperatorName(comparisonMatches[2])\r\n      };\r\n    }\r\n\r\n  } else if (rangeMatches) {\r\n    return {\r\n      type: 'range',\r\n      values: [ rangeMatches[2], rangeMatches[3] ].map(value => parseFloat(value)),\r\n      start: rangeMatches[1] === ']' ? 'exclude' : 'include',\r\n      end: rangeMatches[4] === '[' ? 'exclude' : 'include'\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport function isEmptyString(string) {\r\n  return string === '';\r\n}\r\n\r\nfunction isNumber(matches) {\r\n  return matches[0] && matches[1] && !matches[2] && !matches[3];\r\n}\r\n\r\nfunction isComparison(matches) {\r\n  return matches[0] && !matches[1] && matches[2] && matches[3];\r\n}\r\n\r\nexport function getComparisonString(comparisonOperator, comparisonValue) {\r\n  if (comparisonOperator === 'equals') {\r\n    return `${ comparisonValue }`;\r\n  } else {\r\n    return `${ operators[comparisonOperator] } ${ comparisonValue }`;\r\n  }\r\n}\r\n\r\nexport function getRangeString(\r\n    rangeStartValue,\r\n    rangeEndValue,\r\n    rangeStartType,\r\n    rangeEndType) {\r\n  const rangeStartChar = rangeStartType === 'exclude' ? ']' : '[',\r\n        rangeEndChar = rangeEndType === 'exclude' ? '[' : ']';\r\n\r\n  return `${ rangeStartChar }${ rangeStartValue }..${ rangeEndValue }${ rangeEndChar }`;\r\n}"],"file":"Utils.js"}