import { createVNode, createComponentVNode } from "inferno";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import InputSelect from 'dmn-js-shared/lib/components/InputSelect';
import { getBusinessObject, isInput } from 'dmn-js-shared/lib/util/ModelUtil';

var ExpressionLanguage = /*#__PURE__*/function () {
  function ExpressionLanguage(components, elementRegistry, modeling, expressionLanguages, translate, contextMenu) {
    var _this = this;

    _classCallCheck(this, ExpressionLanguage);

    this._modeling = modeling;
    this._translate = translate;
    this._expressionLanguages = expressionLanguages;
    components.onGetComponent('context-menu-cell-additional', function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (context.contextMenuType && context.contextMenuType === 'context-menu') {
        var event = context.event,
            id = context.id;

        if (!id) {
          return;
        }

        var element = elementRegistry.get(id); // element might not be in element registry (e.g. cut)

        if (!element) {
          return;
        }

        if (!_this._shouldDisplayContextMenuEntry(element)) {
          return;
        }

        var openMenu = function openMenu(clickEvent) {
          contextMenu.open({
            x: (event || clickEvent).pageX,
            y: (event || clickEvent).pageY
          }, {
            contextMenuType: 'expression-language',
            id: id
          });
        };

        return createVNode(1, "div", "context-menu-group-entry", _this._translate('Change Cell Expression Language'), 0, {
          "onClick": openMenu
        });
      }
    });
    components.onGetComponent('context-menu', function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (context.contextMenuType && context.contextMenuType === 'expression-language') {
        var id = context.id;

        if (!id) {
          return;
        }

        var element = elementRegistry.get(id); // element might not be in element registry (e.g. cut)

        if (!element) {
          return;
        }

        var expressionLanguage = _this._getElementExpressionLanguage(element);

        var options = expressionLanguages.getAll();
        var className = 'context-menu-group-entry ' + 'context-menu-entry-set-expression-language';
        return function () {
          return createVNode(1, "div", "context-menu-flex", createVNode(1, "div", "context-menu-group", createVNode(1, "div", className, [createVNode(1, "div", null, _this._translate('Expression Language'), 0), createComponentVNode(2, InputSelect, {
            "className": "expression-language",
            "onChange": function onChange(value) {
              return _this.onChange(element, value);
            },
            "options": options,
            "value": expressionLanguage
          })], 4), 2), 2);
        };
      }
    });
    components.onGetComponent('context-menu', function () {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (context.contextMenuType === 'input-edit') {
        return function () {
          var inputExpression = context.input.inputExpression;

          if (!_this._shouldDisplayContextMenuEntry(inputExpression)) {
            return;
          }

          var expressionLanguage = _this._getElementExpressionLanguage(inputExpression);

          var options = expressionLanguages.getAll();
          return createVNode(1, "div", "context-menu-container ref-language", createVNode(1, "div", "dms-form-control", [createVNode(1, "label", "dms-label", _this._translate('Expression Language'), 0), createComponentVNode(2, InputSelect, {
            "className": "ref-language",
            "value": expressionLanguage || '',
            "onChange": function onChange(value) {
              return _this.onChange(inputExpression, value);
            },
            "options": options
          })], 4), 2);
        };
      }
    });
  }

  _createClass(ExpressionLanguage, [{
    key: "onChange",
    value: function onChange(element, expressionLanguage) {
      this._modeling.editExpressionLanguage(element, expressionLanguage);
    }
  }, {
    key: "_shouldDisplayContextMenuEntry",
    value: function _shouldDisplayContextMenuEntry(element) {
      var expressionLanguages = this._expressionLanguages.getAll();

      if (expressionLanguages.length > 1) {
        return true;
      }

      var expressionLanguage = this._getElementExpressionLanguage(element);

      return expressionLanguage !== this._getDefaultElementExpressionLanguage(element);
    }
  }, {
    key: "_getElementExpressionLanguage",
    value: function _getElementExpressionLanguage(element) {
      return getBusinessObject(element).expressionLanguage || this._getDefaultElementExpressionLanguage(element);
    }
  }, {
    key: "_getDefaultElementExpressionLanguage",
    value: function _getDefaultElementExpressionLanguage(element) {
      return this._expressionLanguages.getDefault(isInput(element.col) ? 'inputCell' : 'outputCell').value;
    }
  }]);

  return ExpressionLanguage;
}();

export { ExpressionLanguage as default };
ExpressionLanguage.$inject = ['components', 'elementRegistry', 'modeling', 'expressionLanguages', 'translate', 'contextMenu'];
//# sourceMappingURL=ExpressionLanguage.js.map