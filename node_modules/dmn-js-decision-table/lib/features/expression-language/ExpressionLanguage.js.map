{"version":3,"sources":["../../../src/features/expression-language/ExpressionLanguage.js"],"names":["InputSelect","getBusinessObject","isInput","ExpressionLanguage","components","elementRegistry","modeling","expressionLanguages","translate","contextMenu","_modeling","_translate","_expressionLanguages","onGetComponent","context","contextMenuType","event","id","element","get","_shouldDisplayContextMenuEntry","openMenu","clickEvent","open","x","pageX","y","pageY","expressionLanguage","_getElementExpressionLanguage","options","getAll","className","value","onChange","inputExpression","input","editExpressionLanguage","length","_getDefaultElementExpressionLanguage","getDefault","col","$inject"],"mappings":"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","sourcesContent":["import InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\nimport {\r\n  getBusinessObject,\r\n  isInput\r\n} from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\n\r\nexport default class ExpressionLanguage {\r\n  constructor(\r\n      components, elementRegistry, modeling, expressionLanguages,\r\n      translate, contextMenu) {\r\n    this._modeling = modeling;\r\n    this._translate = translate;\r\n    this._expressionLanguages = expressionLanguages;\r\n\r\n    components.onGetComponent('context-menu-cell-additional', (context = {}) => {\r\n      if (context.contextMenuType && context.contextMenuType === 'context-menu') {\r\n\r\n        const {\r\n          event,\r\n          id\r\n        } = context;\r\n\r\n        if (!id) {\r\n          return;\r\n        }\r\n\r\n        const element = elementRegistry.get(id);\r\n\r\n        // element might not be in element registry (e.g. cut)\r\n        if (!element) {\r\n          return;\r\n        }\r\n\r\n        if (!this._shouldDisplayContextMenuEntry(element)) {\r\n          return;\r\n        }\r\n\r\n        const openMenu = clickEvent => {\r\n          contextMenu.open({\r\n            x: (event || clickEvent).pageX,\r\n            y: (event || clickEvent).pageY\r\n          }, {\r\n            contextMenuType: 'expression-language',\r\n            id\r\n          });\r\n        };\r\n\r\n        return (\r\n          <div\r\n            className=\"context-menu-group-entry\"\r\n            onClick={ openMenu }\r\n          >\r\n            { this._translate('Change Cell Expression Language') }\r\n          </div>\r\n        );\r\n\r\n      }\r\n    });\r\n\r\n    components.onGetComponent('context-menu', (context = {}) => {\r\n      if (context.contextMenuType && context.contextMenuType === 'expression-language') {\r\n\r\n        const { id } = context;\r\n\r\n        if (!id) {\r\n          return;\r\n        }\r\n\r\n        const element = elementRegistry.get(id);\r\n\r\n        // element might not be in element registry (e.g. cut)\r\n        if (!element) {\r\n          return;\r\n        }\r\n\r\n        const expressionLanguage = this._getElementExpressionLanguage(element);\r\n\r\n        const options = expressionLanguages.getAll();\r\n\r\n        const className = 'context-menu-group-entry ' +\r\n          'context-menu-entry-set-expression-language';\r\n\r\n        return () => (\r\n          <div\r\n            className=\"context-menu-flex\">\r\n            <div className=\"context-menu-group\">\r\n              <div\r\n                className={ className }>\r\n                <div>\r\n                  { this._translate('Expression Language') }\r\n                </div>\r\n\r\n                <InputSelect\r\n                  className=\"expression-language\"\r\n                  onChange={ value => this.onChange(element, value) }\r\n                  options={ options }\r\n                  value={ expressionLanguage } />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n    });\r\n\r\n    components.onGetComponent('context-menu', (context = {}) => {\r\n      if (\r\n        context.contextMenuType === 'input-edit'\r\n      ) {\r\n        return () => {\r\n          const { inputExpression } = context.input;\r\n\r\n          if (!this._shouldDisplayContextMenuEntry(inputExpression)) {\r\n            return;\r\n          }\r\n\r\n          const expressionLanguage = this._getElementExpressionLanguage(inputExpression);\r\n\r\n          const options = expressionLanguages.getAll();\r\n\r\n          return <div className=\"context-menu-container ref-language\">\r\n            <div className=\"dms-form-control\">\r\n              <label className=\"dms-label\">\r\n                {\r\n                  this._translate('Expression Language')\r\n                }\r\n              </label>\r\n\r\n              <InputSelect\r\n                className=\"ref-language\"\r\n                value={ expressionLanguage || '' }\r\n                onChange={ value => this.onChange(inputExpression, value) }\r\n                options={ options } />\r\n            </div>\r\n          </div>;\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  onChange(element, expressionLanguage) {\r\n    this._modeling.editExpressionLanguage(element, expressionLanguage);\r\n  }\r\n\r\n  _shouldDisplayContextMenuEntry(element) {\r\n    const expressionLanguages = this._expressionLanguages.getAll();\r\n\r\n    if (expressionLanguages.length > 1) {\r\n      return true;\r\n    }\r\n\r\n    const expressionLanguage = this._getElementExpressionLanguage(element);\r\n\r\n    return expressionLanguage !== this._getDefaultElementExpressionLanguage(element);\r\n  }\r\n\r\n  _getElementExpressionLanguage(element) {\r\n    return getBusinessObject(element).expressionLanguage\r\n    || this._getDefaultElementExpressionLanguage(element);\r\n  }\r\n\r\n  _getDefaultElementExpressionLanguage(element) {\r\n    return this._expressionLanguages.getDefault(\r\n      isInput(element.col) ? 'inputCell' : 'outputCell').value;\r\n  }\r\n}\r\n\r\nExpressionLanguage.$inject = [\r\n  'components',\r\n  'elementRegistry',\r\n  'modeling',\r\n  'expressionLanguages',\r\n  'translate',\r\n  'contextMenu'\r\n];\r\n"],"file":"ExpressionLanguage.js"}