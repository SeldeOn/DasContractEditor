function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import { createVNode, createComponentVNode, createTextVNode } from "inferno";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { Component } from 'inferno';
import Logo from 'dmn-js-shared/lib/components/Logo';

var PoweredByOverlayComponent = /*#__PURE__*/function (_Component) {
  _inherits(PoweredByOverlayComponent, _Component);

  var _super = _createSuper(PoweredByOverlayComponent);

  function PoweredByOverlayComponent(props) {
    var _this;

    _classCallCheck(this, PoweredByOverlayComponent);

    _this = _super.call(this, props);
    _this.state = {
      show: false
    };
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    _this.onShow = _this.onShow.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(PoweredByOverlayComponent, [{
    key: "onClick",
    value: function onClick() {
      this.setState({
        show: false
      });
    }
  }, {
    key: "onShow",
    value: function onShow() {
      this.setState({
        show: true
      });
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      var eventBus = this._eventBus = this.context.injector.get('eventBus');
      eventBus.on('poweredBy.show', this.onShow);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._eventBus.off('poweredBy.show', this.onShow);
    }
  }, {
    key: "render",
    value: function render() {
      var show = this.state.show;
      return show && createVNode(1, "div", "powered-by-overlay", createVNode(1, "div", "powered-by-overlay-content", [createVNode(1, "a", "logo", createComponentVNode(2, Logo), 2, {
        "href": "https://bpmn.io",
        "target": "_blank",
        "rel": "noopener"
      }), createVNode(1, "span", null, [createTextVNode("Web-based tooling for BPMN, DMN and CMMN diagrams powered by "), createVNode(1, "a", null, createTextVNode("bpmn.io"), 2, {
        "href": "http://bpmn.io",
        "target": "_blank"
      }), createTextVNode(".")], 4)], 4, {
        "onClick": function onClick(e) {
          return e.stopPropagation();
        }
      }), 2, {
        "onClick": this.onClick
      });
    }
  }]);

  return PoweredByOverlayComponent;
}(Component);

export { PoweredByOverlayComponent as default };
//# sourceMappingURL=PoweredByOverlayComponent.js.map