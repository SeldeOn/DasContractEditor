{"version":3,"sources":["../../../src/features/rules/DecisionTableModelingRules.js"],"names":["every","Row","Col","isInput","isOutput","RuleProvider","HIGH_PRIORITY","DecisionTableModelingRules","eventBus","sheet","_sheet","addRule","col","index","getRoot","businessObject","input","length","cols","filter","c","data","target","root","canPasteRows","canPasteCols","descriptor","type","cells","cellDescriptor","$type","targetCol","rows","$inject"],"mappings":"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","sourcesContent":["import {\r\n  every\r\n} from 'min-dash';\r\n\r\nimport { Row, Col } from 'table-js/lib/model';\r\n\r\nimport { isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\nimport RuleProvider from 'diagram-js/lib/features/rules/RuleProvider';\r\n\r\nconst HIGH_PRIORITY = 2000;\r\n\r\nexport default class DecisionTableModelingRules extends RuleProvider {\r\n\r\n  constructor(eventBus, sheet) {\r\n    super(eventBus);\r\n\r\n    this._sheet = sheet;\r\n  }\r\n\r\n  init() {\r\n    this.addRule('col.move', HIGH_PRIORITY, ({ col, index }) => {\r\n      const { businessObject } = this._sheet.getRoot(),\r\n            { input } = businessObject;\r\n\r\n      if (isInput(col)) {\r\n        return index < input.length;\r\n      } else {\r\n        return index >= input.length;\r\n      }\r\n    });\r\n\r\n    this.addRule('col.remove', HIGH_PRIORITY, ({ col }) => {\r\n      const { cols } = this._sheet.getRoot();\r\n\r\n      if (isOutput(col)) {\r\n        return cols.filter(c => isOutput(c)).length > 1;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    // a rule that is aware of the data structure coming from copy and paste\r\n    this.addRule('paste', HIGH_PRIORITY, ({ data, target }) => {\r\n      if (!data || !target) {\r\n        return false;\r\n      }\r\n\r\n      const { root } = data;\r\n\r\n      if (target instanceof Row) {\r\n        return this.canPasteRows(root);\r\n      }\r\n\r\n      if (target instanceof Col) {\r\n        return this.canPasteCols(root, target);\r\n      }\r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  canPasteRows(root) {\r\n    const { cols } = this._sheet.getRoot();\r\n\r\n    return every(root, descriptor => {\r\n      if (descriptor.type !== 'row') {\r\n        return false;\r\n      }\r\n\r\n      if (descriptor.cells.length !== cols.length) {\r\n        return false;\r\n      }\r\n\r\n      return every(descriptor.cells, (cellDescriptor, index) => {\r\n        if (isInput(cols[index])) {\r\n          return cellDescriptor.businessObject.$type === 'dmn:UnaryTests';\r\n        } else {\r\n          return cellDescriptor.businessObject.$type === 'dmn:LiteralExpression';\r\n        }\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  canPasteCols(root, targetCol) {\r\n    const { rows } = this._sheet.getRoot();\r\n\r\n    return every(root, descriptor => {\r\n      if (descriptor.type !== 'col') {\r\n        return false;\r\n      }\r\n\r\n      if (descriptor.cells.length !== rows.length) {\r\n        return false;\r\n      }\r\n\r\n      if (isInput(targetCol)) {\r\n        return descriptor.businessObject.$type === 'dmn:InputClause';\r\n      } else {\r\n        return descriptor.businessObject.$type === 'dmn:OutputClause';\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nDecisionTableModelingRules.$inject = [ 'eventBus', 'sheet' ];"],"file":"DecisionTableModelingRules.js"}