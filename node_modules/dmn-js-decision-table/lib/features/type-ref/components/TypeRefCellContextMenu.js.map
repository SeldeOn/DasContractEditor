{"version":3,"sources":["../../../../src/features/type-ref/components/TypeRefCellContextMenu.js"],"names":["Component","is","isInput","isOutput","InputSelect","TypeRefCellContextMenu","props","context","value","element","getElement","actualElement","$parent","newProperties","inputExpression","typeRef","_modeling","updateProperties","_translate","injector","get","_dataTypes","input","output","typeRefOptions","getAll","map","t","label","onTypeChange"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;AAEA,SAASC,EAAT,EAAaC,OAAb,EAAsBC,QAAtB,QAAsC,kCAAtC;AAEA,OAAOC,WAAP,MAAwB,0CAAxB;;IAGqBC,sB;;;;;AAEnB,kCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAC1B,8BAAMD,KAAN;;AAD0B,mEAQb,UAACE,KAAD,EAAW;AACxB,UAAMC,OAAO,GAAG,MAAKC,UAAL,EAAhB;;AAEA,UAAMC,aAAa,GAAGV,EAAE,CAACQ,OAAD,EAAU,uBAAV,CAAF,GAClBA,OAAO,CAACG,OADU,GAElBH,OAFJ;AAIA,UAAII,aAAJ;;AAEA,UAAIX,OAAO,CAACS,aAAD,CAAX,EAA4B;AAC1BE,QAAAA,aAAa,GAAG;AACdC,UAAAA,eAAe,EAAE;AACfC,YAAAA,OAAO,EAAEP;AADM;AADH,SAAhB;AAKD,OAND,MAMO,IAAIL,QAAQ,CAACQ,aAAD,CAAZ,EAA6B;AAClCE,QAAAA,aAAa,GAAG;AACdE,UAAAA,OAAO,EAAEP;AADK,SAAhB;AAGD;;AAED,YAAKQ,SAAL,CAAeC,gBAAf,CAAgCN,aAAhC,EAA+CE,aAA/C;AACD,KA9B2B;;AAG1B,UAAKK,UAAL,GAAkBX,OAAO,CAACY,QAAR,CAAiBC,GAAjB,CAAqB,WAArB,CAAlB;AACA,UAAKJ,SAAL,GAAiBT,OAAO,CAACY,QAAR,CAAiBC,GAAjB,CAAqB,UAArB,CAAjB;AACA,UAAKC,UAAL,GAAkBd,OAAO,CAACY,QAAR,CAAiBC,GAAjB,CAAqB,WAArB,CAAlB;AAL0B;AAM3B;;;;WA0BD,sBAAa;AACX,aAAO,KAAKd,KAAL,CAAWC,OAAX,CAAmBe,KAAnB,IAA4B,KAAKhB,KAAL,CAAWC,OAAX,CAAmBgB,MAAtD;AACD;;;WAED,kBAAS;AACP,UAAMd,OAAO,GAAG,KAAKC,UAAL,EAAhB;AAEA,UAAMK,OAAO,GAAG,CACdd,EAAE,CAACQ,OAAD,EAAU,iBAAV,CAAF,GACEA,OAAO,CAACK,eADV,GAEEL,OAHY,EAIdM,OAJF;;AAMA,UAAMS,cAAc,GAAG,KAAKH,UAAL,CAAgBI,MAAhB,GAAyBC,GAAzB,CAA6B,UAAAC,CAAC,EAAI;AACvD,eAAO;AACLC,UAAAA,KAAK,EAAED,CADF;AAELnB,UAAAA,KAAK,EAAEmB;AAFF,SAAP;AAID,OALsB,CAAvB;;AAOA,mCACiB,sCADjB,wBAEmB,kBAFnB,2BAGuB,WAHvB,GAIU,KAAKT,UAAL,CAAgB,MAAhB,CAJV;AAAA,qBAQkB,sBARlB;AAAA,oBASmB,KAAKW,YATxB;AAAA,mBAUkBL,cAVlB;AAAA,iBAWgBT;AAXhB;AAeD;;;;EArEiDf,S;;SAA/BK,sB","sourcesContent":["import { Component } from 'inferno';\n\nimport { is, isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';\n\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\n\n\nexport default class TypeRefCellContextMenu extends Component {\n\n  constructor(props, context) {\n    super(props);\n\n    this._translate = context.injector.get('translate');\n    this._modeling = context.injector.get('modeling');\n    this._dataTypes = context.injector.get('dataTypes');\n  }\n\n  onTypeChange = (value) => {\n    const element = this.getElement();\n\n    const actualElement = is(element, 'dmn:LiteralExpression')\n      ? element.$parent\n      : element;\n\n    let newProperties;\n\n    if (isInput(actualElement)) {\n      newProperties = {\n        inputExpression: {\n          typeRef: value\n        }\n      };\n    } else if (isOutput(actualElement)) {\n      newProperties = {\n        typeRef: value\n      };\n    }\n\n    this._modeling.updateProperties(actualElement, newProperties);\n  }\n\n  getElement() {\n    return this.props.context.input || this.props.context.output;\n  }\n\n  render() {\n    const element = this.getElement();\n\n    const typeRef = (\n      is(element, 'dmn:InputClause') ?\n        element.inputExpression :\n        element\n    ).typeRef;\n\n    const typeRefOptions = this._dataTypes.getAll().map(t => {\n      return {\n        label: t,\n        value: t\n      };\n    });\n\n    return (\n      <div className=\"type-ref-edit context-menu-container\">\n        <div className=\"dms-form-control\">\n          <label className=\"dms-label\">\n            { this._translate('Type') }:\n          </label>\n\n          <InputSelect\n            className=\"type-ref-edit-select\"\n            onChange={ this.onTypeChange }\n            options={ typeRefOptions }\n            value={ typeRef } />\n        </div>\n      </div>\n    );\n  }\n}"],"file":"TypeRefCellContextMenu.js"}