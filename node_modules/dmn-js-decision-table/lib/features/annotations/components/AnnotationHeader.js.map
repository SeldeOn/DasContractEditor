{"version":3,"sources":["../../../../src/features/annotations/components/AnnotationHeader.js"],"names":["Component","inject","mixin","ComponentWithSlots","MIN_WIDTH","AnnotationHeader","props","context","forceUpdate","changeSupport","onElementsChanged","getRoot","offElementsChanged","sheet","decisionTable","annotationsWidth","businessObject","get","width","slotFills","type","cellType","col","minWidth","translate","$inject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;AAEA,SACEC,MADF,EAEEC,KAFF,QAGO,yBAHP;AAKA,SACEC,kBADF,QAEO,qCAFP;AAKA,IAAMC,SAAS,GAAG,GAAlB;;IAGqBC,gB;;;;;AACnB,4BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAC1B,8BAAMD,KAAN,EAAaC,OAAb;;AAD0B,wEAgBR,YAAM;AACxB,YAAKC,WAAL;AACD,KAlB2B;;AAG1BN,IAAAA,KAAK,gCAAOC,kBAAP,CAAL;AAEAF,IAAAA,MAAM,+BAAN;AAL0B;AAM3B;;;;WAED,6BAAoB;AAClB,WAAKQ,aAAL,CAAmBC,iBAAnB,CAAqC,KAAKC,OAAL,EAArC,EAAqD,KAAKD,iBAA1D;AACD;;;WAED,gCAAuB;AACrB,WAAKD,aAAL,CAAmBG,kBAAnB,CAAsC,KAAKD,OAAL,EAAtC,EAAsD,KAAKD,iBAA3D;AACD;;;WAMD,mBAAU;AACR,aAAO,KAAKG,KAAL,CAAWF,OAAX,EAAP;AACD;;;WAED,kBAAS;AACP,UAAMG,aAAa,GAAG,KAAKH,OAAL,EAAtB;AACA,UAAMI,gBAAgB,GAAGD,aAAa,CAACE,cAAd,CAA6BC,GAA7B,CAAiC,kBAAjC,CAAzB;AACA,UAAMC,KAAK,GAAG,CAACH,gBAAgB,IAAIX,SAArB,IAAkC,IAAhD;AAEA,kCAEc,mBAFd,GAMM,KAAKe,SAAL,CAAe;AACbC,QAAAA,IAAI,EAAE,YADO;AAEbb,QAAAA,OAAO,EAAE;AACPc,UAAAA,QAAQ,EAAE,aADH;AAEPC,UAAAA,GAAG,EAAE,KAAKT,KAAL,CAAWF,OAAX,EAFE;AAGPY,UAAAA,QAAQ,EAAEnB;AAHH;AAFI,OAAf,CANN,EAgBM,KAAKoB,SAAL,CAAe,aAAf,CAhBN;AAAA,iBAGY;AAAEN,UAAAA,KAAK,EAALA;AAAF;AAHZ;AAmBD;;;;EAjD2ClB,S;;SAAzBK,gB;AAoDrBA,gBAAgB,CAACoB,OAAjB,GAA2B,CAAE,eAAF,EAAmB,OAAnB,EAA4B,WAA5B,CAA3B","sourcesContent":["import { Component } from 'inferno';\n\nimport {\n  inject,\n  mixin\n} from 'table-js/lib/components';\n\nimport {\n  ComponentWithSlots\n} from 'dmn-js-shared/lib/components/mixins';\n\n\nconst MIN_WIDTH = 400;\n\n\nexport default class AnnotationHeader extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    mixin(this, ComponentWithSlots);\n\n    inject(this);\n  }\n\n  componentDidMount() {\n    this.changeSupport.onElementsChanged(this.getRoot(), this.onElementsChanged);\n  }\n\n  componentWillUnmount() {\n    this.changeSupport.offElementsChanged(this.getRoot(), this.onElementsChanged);\n  }\n\n  onElementsChanged = () => {\n    this.forceUpdate();\n  }\n\n  getRoot() {\n    return this.sheet.getRoot();\n  }\n\n  render() {\n    const decisionTable = this.getRoot();\n    const annotationsWidth = decisionTable.businessObject.get('annotationsWidth');\n    const width = (annotationsWidth || MIN_WIDTH) + 'px';\n\n    return (\n      <th\n        className=\"annotation header\"\n        style={ { width } }\n      >\n        {\n          this.slotFills({\n            type: 'cell-inner',\n            context: {\n              cellType: 'annotations',\n              col: this.sheet.getRoot(),\n              minWidth: MIN_WIDTH\n            }\n          })\n        }\n\n        { this.translate('Annotations') }\n      </th>\n    );\n  }\n}\n\nAnnotationHeader.$inject = [ 'changeSupport', 'sheet', 'translate' ];\n"],"file":"AnnotationHeader.js"}