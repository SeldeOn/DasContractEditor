function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import { createVNode } from "inferno";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Component } from 'inferno';
import { inject, mixin } from 'table-js/lib/components';
import { ComponentWithSlots } from 'dmn-js-shared/lib/components/mixins';
var MIN_WIDTH = 400;

var AnnotationHeader = /*#__PURE__*/function (_Component) {
  _inherits(AnnotationHeader, _Component);

  var _super = _createSuper(AnnotationHeader);

  function AnnotationHeader(props, context) {
    var _this;

    _classCallCheck(this, AnnotationHeader);

    _this = _super.call(this, props, context);

    _defineProperty(_assertThisInitialized(_this), "onElementsChanged", function () {
      _this.forceUpdate();
    });

    mixin(_assertThisInitialized(_this), ComponentWithSlots);
    inject(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(AnnotationHeader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.changeSupport.onElementsChanged(this.getRoot(), this.onElementsChanged);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.changeSupport.offElementsChanged(this.getRoot(), this.onElementsChanged);
    }
  }, {
    key: "getRoot",
    value: function getRoot() {
      return this.sheet.getRoot();
    }
  }, {
    key: "render",
    value: function render() {
      var decisionTable = this.getRoot();
      var annotationsWidth = decisionTable.businessObject.get('annotationsWidth');
      var width = (annotationsWidth || MIN_WIDTH) + 'px';
      return createVNode(1, "th", "annotation header", [this.slotFills({
        type: 'cell-inner',
        context: {
          cellType: 'annotations',
          col: this.sheet.getRoot(),
          minWidth: MIN_WIDTH
        }
      }), this.translate('Annotations')], 0, {
        "style": {
          width: width
        }
      });
    }
  }]);

  return AnnotationHeader;
}(Component);

export { AnnotationHeader as default };
AnnotationHeader.$inject = ['changeSupport', 'sheet', 'translate'];
//# sourceMappingURL=AnnotationHeader.js.map