{"version":3,"sources":["../../../../../src/features/annotations/editor/components/AnnotationCell.js"],"names":["Component","EditableComponent","Cell","inject","EditableAnnotationCell","props","context","forceUpdate","text","row","modeling","editAnnotation","businessObject","changeSupport","onElementsChanged","id","offElementsChanged","rowIndex","description","setAnnotationValue","$inject","AnnotationEditor","getClassName","getEditor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,SAA1B;AAEA,OAAOC,iBAAP,MAA8B,gDAA9B;AAEA,SACEC,IADF,EAEEC,MAFF,QAGO,yBAHP;;IAMqBC,sB;;;;;AAEnB,kCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAC1B,8BAAMD,KAAN,EAAaC,OAAb;;AAD0B,wEAkBR,YAAM;AACxB,YAAKC,WAAL;AACD,KApB2B;;AAAA,yEAsBP,UAACC,IAAD,EAAU;AAC7B,UAAQC,GAAR,GAAgB,MAAKJ,KAArB,CAAQI,GAAR;;AAEA,YAAKC,QAAL,CAAcC,cAAd,CAA6BF,GAAG,CAACG,cAAjC,EAAiDJ,IAAjD;AACD,KA1B2B;;AAG1BL,IAAAA,MAAM,+BAAN;AAH0B;AAI3B;;;;WAED,8BAAqB;AACnB,UAAQM,GAAR,GAAgB,KAAKJ,KAArB,CAAQI,GAAR;AAEA,WAAKI,aAAL,CAAmBC,iBAAnB,CAAqCL,GAAG,CAACM,EAAzC,EAA6C,KAAKD,iBAAlD;AACD;;;WAED,gCAAuB;AACrB,UAAQL,GAAR,GAAgB,KAAKJ,KAArB,CAAQI,GAAR;AAEA,WAAKI,aAAL,CAAmBG,kBAAnB,CAAsCP,GAAG,CAACM,EAA1C,EAA8C,KAAKD,iBAAnD;AACD;;;WAaD,kBAAS;AACP,wBAGI,KAAKT,KAHT;AAAA,UACEI,GADF,eACEA,GADF;AAAA,UAEEQ,QAFF,eAEEA,QAFF;AAIA,gCAGIR,GAAG,CAACG,cAHR;AAAA,UACEM,WADF,uBACEA,WADF;AAAA,UAEEH,EAFF,uBAEEA,EAFF;AAKA;AAAA,qBAGc,YAHd;AAAA,oBAIe,KAAKI,kBAJpB;AAAA,4BAKgBF,QALhB;AAAA,iBAMYC,WANZ;AAAA,qBAOgBH,EAPhB;AAAA,uBAQkBN,GAAG,CAACM,EARtB;AAAA;AAAA,4BAWuB,IAXvB;AAAA,uBAYgB,mBAZhB;AAAA,sBAaiB,KAAKI,kBAbtB;AAAA,mBAccD;AAdd;AAAA;AAiBD;;;;EA1DiDlB,S;;SAA/BI,sB;AA8DrBA,sBAAsB,CAACgB,OAAvB,GAAiC,CAC/B,eAD+B,EAE/B,UAF+B,CAAjC;;IAMMC,gB;;;;;;;;;;;;;WAEJ,kBAAS;AACP,mCACmB,KAAKC,YAAL,EADnB,EAEM,KAAKC,SAAL,EAFN;AAKD;;;;EAR4BtB,iB","sourcesContent":["import { Component } from 'inferno';\n\nimport EditableComponent from 'dmn-js-shared/lib/components/EditableComponent';\n\nimport {\n  Cell,\n  inject\n} from 'table-js/lib/components';\n\n\nexport default class EditableAnnotationCell extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    inject(this);\n  }\n\n  componentWillMount() {\n    const { row } = this.props;\n\n    this.changeSupport.onElementsChanged(row.id, this.onElementsChanged);\n  }\n\n  componentWillUnmount() {\n    const { row } = this.props;\n\n    this.changeSupport.offElementsChanged(row.id, this.onElementsChanged);\n  }\n\n  onElementsChanged = () => {\n    this.forceUpdate();\n  }\n\n  setAnnotationValue = (text) => {\n    const { row } = this.props;\n\n    this.modeling.editAnnotation(row.businessObject, text);\n  }\n\n\n  render() {\n    const {\n      row,\n      rowIndex\n    } = this.props;\n    const {\n      description,\n      id\n    } = row.businessObject;\n\n    return (\n\n      <Cell\n        className=\"annotation\"\n        onChange={ this.setAnnotationValue }\n        coords={ `${rowIndex}:annotation` }\n        value={ description }\n        elementId={ id }\n        data-row-id={ row.id }>\n\n        <AnnotationEditor\n          ctrlForNewline={ true }\n          className=\"annotation-editor\"\n          onChange={ this.setAnnotationValue }\n          value={ description } />\n      </Cell>\n    );\n  }\n\n}\n\nEditableAnnotationCell.$inject = [\n  'changeSupport',\n  'modeling'\n];\n\n\nclass AnnotationEditor extends EditableComponent {\n\n  render() {\n    return (\n      <div className={ this.getClassName() }>\n        { this.getEditor() }\n      </div>\n    );\n  }\n}"],"file":"AnnotationCell.js"}