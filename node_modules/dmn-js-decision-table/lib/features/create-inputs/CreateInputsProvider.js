function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import CreateInputsHeaderCell from './components/CreateInputHeaderCell';
import CreateInputsCell from './components/CreateInputCell';
var LOW_PRIORITY = 500;

var CreateInputsProvider = /*#__PURE__*/_createClass(function CreateInputsProvider(components, sheet) {
  _classCallCheck(this, CreateInputsProvider);

  components.onGetComponent('cell', LOW_PRIORITY, function (_ref) {
    var cellType = _ref.cellType;

    var _sheet$getRoot = sheet.getRoot(),
        businessObject = _sheet$getRoot.businessObject;

    if (businessObject.input && businessObject.input.length) {
      return;
    }

    if (cellType === 'before-label-cells') {
      return CreateInputsHeaderCell;
    } else if (cellType === 'before-rule-cells') {
      return CreateInputsCell;
    }
  });
});

export { CreateInputsProvider as default };
CreateInputsProvider.$inject = ['components', 'sheet'];
//# sourceMappingURL=CreateInputsProvider.js.map