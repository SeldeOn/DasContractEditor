{"version":3,"sources":["../../../src/features/simple-string-edit/Utils.js"],"names":["isInput","parseString","string","isEmptyString","trim","type","values","split","result","openString","forEach","value","test","push","matches","match","getInputOrOutputValues","inputOrOutput","inputOrOutputValues","inputValues","outputValues","text","map"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kCAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAElC;AACA,MAAI,CAACA,MAAD,IAAWC,aAAa,CAACD,MAAM,CAACE,IAAP,EAAD,CAA5B,EAA6C;AAC3C,WAAO;AACLC,MAAAA,IAAI,EAAE,aADD;AAELC,MAAAA,MAAM,EAAE;AAFH,KAAP;AAID,GARiC,CAUlC;;;AACA,MAAIA,MAAM,GAAGJ,MAAM,CAACK,KAAP,CAAa,GAAb,CAAb;AAEA,MAAMC,MAAM,GAAG;AACbH,IAAAA,IAAI,EAAE,aADO;AAEbC,IAAAA,MAAM,EAAE;AAFK,GAAf;AAKA,MAAIG,UAAU,GAAG,EAAjB;AAEAH,EAAAA,MAAM,CAACI,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtBF,IAAAA,UAAU,IAAIE,KAAd;;AAEA,QAAI,YAAYC,IAAZ,CAAiBH,UAAU,CAACL,IAAX,EAAjB,CAAJ,EAAyC;AACvCI,MAAAA,MAAM,CAACF,MAAP,CAAcO,IAAd,CAAmBJ,UAAU,CAACL,IAAX,EAAnB;AAEAK,MAAAA,UAAU,GAAG,EAAb;AACD,KAJD,MAIO;AACLA,MAAAA,UAAU,IAAI,GAAd;AACD;AACF,GAVD;;AAYA,MAAI,CAACA,UAAL,EAAiB;AACf,WAAOD,MAAP;AACD,GAlCiC,CAoClC;;;AACAA,EAAAA,MAAM,CAACH,IAAP,GAAc,UAAd;AACAG,EAAAA,MAAM,CAACF,MAAP,GAAgB,EAAhB;AAEAG,EAAAA,UAAU,GAAG,EAAb;AAEA,MAAMK,OAAO,GAAGZ,MAAM,CAACa,KAAP,CAAa,qBAAb,CAAhB;;AAEA,MAAID,OAAJ,EAAa;AACXR,IAAAA,MAAM,GAAGQ,OAAO,CAAC,CAAD,CAAP,CAAWP,KAAX,CAAiB,GAAjB,CAAT;AAEAD,IAAAA,MAAM,CAACI,OAAP,CAAe,UAAAC,KAAK,EAAI;AACtBF,MAAAA,UAAU,IAAIE,KAAd;;AAEA,UAAI,YAAYC,IAAZ,CAAiBH,UAAU,CAACL,IAAX,EAAjB,CAAJ,EAAyC;AACvCI,QAAAA,MAAM,CAACF,MAAP,CAAcO,IAAd,CAAmBJ,UAAU,CAACL,IAAX,EAAnB;AAEAK,QAAAA,UAAU,GAAG,EAAb;AACD,OAJD,MAIO;AACLA,QAAAA,UAAU,IAAI,GAAd;AACD;AACF,KAVD;;AAYA,QAAI,CAACA,UAAL,EAAiB;AACf,aAAOD,MAAP;AACD;AACF;AACF,C,CAED;;AACA,OAAO,SAASQ,sBAAT,CAAgCC,aAAhC,EAA+C;AACpD,MAAMC,mBAAmB,GACvBlB,OAAO,CAACiB,aAAD,CAAP,GACEA,aAAa,CAACE,WADhB,GAEEF,aAAa,CAACG,YAHlB;;AAKA,MAAI,CAACF,mBAAD,IAAwBf,aAAa,CAACe,mBAAmB,CAACG,IAArB,CAAzC,EAAqE;AACnE,WAAO,EAAP;AACD,GAFD,MAEO;AACL,WAAOH,mBAAmB,CAACG,IAApB,CAAyBd,KAAzB,CAA+B,GAA/B,EAAoCe,GAApC,CAAwC,UAAAX,KAAK;AAAA,aAAIA,KAAK,CAACP,IAAN,EAAJ;AAAA,KAA7C,CAAP;AACD;AACF;;AAED,SAASD,aAAT,CAAuBD,MAAvB,EAA+B;AAC7B,SAAOA,MAAM,KAAK,EAAlB;AACD","sourcesContent":["import { isInput } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\n/**\r\n * Parse input/output entry string to unary tests and type of unary tests.\r\n *\r\n * Example:\r\n *\r\n * not(\"foo\", \"bar\")\r\n *\r\n * returns\r\n *\r\n * {\r\n *   type: 'negation',\r\n *   values: [ \"foo\", \"bar, baz\" ]\r\n * }\r\n *\r\n * @param {string} string - Input/Output entry as string e.g. \"foo\", \"bar\".\r\n */\r\nexport function parseString(string) {\r\n\r\n  // empty string or no string at all\r\n  if (!string || isEmptyString(string.trim())) {\r\n    return {\r\n      type: 'disjunction',\r\n      values: []\r\n    };\r\n  }\r\n\r\n  // disjunction\r\n  let values = string.split(',');\r\n\r\n  const result = {\r\n    type: 'disjunction',\r\n    values: []\r\n  };\r\n\r\n  let openString = '';\r\n\r\n  values.forEach(value => {\r\n    openString += value;\r\n\r\n    if (/^\"[^\"]*\"$/.test(openString.trim())) {\r\n      result.values.push(openString.trim());\r\n\r\n      openString = '';\r\n    } else {\r\n      openString += ',';\r\n    }\r\n  });\r\n\r\n  if (!openString) {\r\n    return result;\r\n  }\r\n\r\n  // negation\r\n  result.type = 'negation';\r\n  result.values = [];\r\n\r\n  openString = '';\r\n\r\n  const matches = string.match(/^\\s*not\\((.*)\\)\\s*$/);\r\n\r\n  if (matches) {\r\n    values = matches[1].split(',');\r\n\r\n    values.forEach(value => {\r\n      openString += value;\r\n\r\n      if (/^\"[^\"]*\"$/.test(openString.trim())) {\r\n        result.values.push(openString.trim());\r\n\r\n        openString = '';\r\n      } else {\r\n        openString += ',';\r\n      }\r\n    });\r\n\r\n    if (!openString) {\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\n// TODO(philippfromme): seperate when refactoring component\r\nexport function getInputOrOutputValues(inputOrOutput) {\r\n  const inputOrOutputValues =\r\n    isInput(inputOrOutput) ?\r\n      inputOrOutput.inputValues :\r\n      inputOrOutput.outputValues;\r\n\r\n  if (!inputOrOutputValues || isEmptyString(inputOrOutputValues.text)) {\r\n    return [];\r\n  } else {\r\n    return inputOrOutputValues.text.split(',').map(value => value.trim());\r\n  }\r\n}\r\n\r\nfunction isEmptyString(string) {\r\n  return string === '';\r\n}"],"file":"Utils.js"}