{"version":3,"sources":["../../../../src/features/simple-string-edit/components/SimpleStringEditContextMenuComponent.js"],"names":["Component","InputSelect","List","ValidatedInput","isInput","getInputOrOutputValues","parseString","DISJUNCTION","NEGATION","INPUT_VALUES_LABEL","OUTPUT_VALUES_LABEL","INPUT_ENTRY_VALUES_LABEL","SimpleStringEditContextMenuComponent","props","context","_translate","injector","get","_modeling","parsedString","element","businessObject","text","values","type","inputOrOutputValues","col","filteredValues","filter","value","includes","isInputClause","items","map","isChecked","isRemovable","group","concat","inputValue","length","state","unaryTestsType","isOutputValueInputChecked","debounceInput","debouncedEditCell","editCell","bind","addUnaryTestsListItem","onInput","onKeyDown","onOutputValueInputClick","onUnaryTestsListChanged","onUnaryTestsTypeChange","cell","getValues","join","setState","item","isValid","event","isEnter","keyCode","stopPropagation","preventDefault","parsedInput","newValues","newItems","options","label","isNegation","showRadio","node","selectNode","marginRight","array","indexOf"],"mappings":"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","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport InputSelect from 'dmn-js-shared/lib/components/InputSelect';\r\n\r\nimport List from 'dmn-js-shared/lib/components/List';\r\n\r\nimport ValidatedInput from 'dmn-js-shared/lib/components/ValidatedInput';\r\n\r\nimport { isInput } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\nimport { getInputOrOutputValues, parseString } from '../Utils';\r\n\r\nconst DISJUNCTION = 'disjunction',\r\n      NEGATION = 'negation';\r\n\r\nconst INPUT_VALUES_LABEL = 'Predefined Values',\r\n      OUTPUT_VALUES_LABEL = 'Predefined Values',\r\n      INPUT_ENTRY_VALUES_LABEL = 'Custom Values';\r\n\r\n\r\nexport default class SimpleStringEditContextMenuComponent extends Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this._translate = context.injector.get('translate');\r\n    this._modeling = context.injector.get('modeling');\r\n\r\n    let parsedString = parseString(props.context.element.businessObject.text);\r\n\r\n    // could not parse\r\n    if (!parsedString) {\r\n      parsedString = {\r\n        values: [],\r\n        type: DISJUNCTION\r\n      };\r\n    }\r\n\r\n    const inputOrOutputValues = getInputOrOutputValues(\r\n      props.context.element.col.businessObject\r\n    );\r\n\r\n    const filteredValues = parsedString.values.filter(value => {\r\n      return !includes(inputOrOutputValues, value);\r\n    });\r\n\r\n    const isInputClause = isInput(props.context.element.col);\r\n\r\n    let items = inputOrOutputValues.map(value => {\r\n      return {\r\n        value,\r\n        isChecked: includes(parsedString.values, value),\r\n        isRemovable: false,\r\n        group: isInputClause ? INPUT_VALUES_LABEL : OUTPUT_VALUES_LABEL\r\n      };\r\n    });\r\n\r\n    if (isInputClause) {\r\n      items = items.concat(filteredValues.map(value => {\r\n        return {\r\n          value,\r\n          isChecked: true,\r\n          isRemovable: true,\r\n          group: INPUT_ENTRY_VALUES_LABEL\r\n        };\r\n      }));\r\n    }\r\n\r\n    let inputValue = '';\r\n\r\n    if (\r\n      !isInputClause && parsedString.values.length &&\r\n      !includes(inputOrOutputValues, parsedString.values[0])\r\n    ) {\r\n      inputValue = parsedString.values[0];\r\n    }\r\n\r\n    this.state = {\r\n      items,\r\n      unaryTestsType: parsedString.type,\r\n      inputValue,\r\n      isOutputValueInputChecked: inputValue !== ''\r\n    };\r\n\r\n    const debounceInput = context.injector.get('debounceInput');\r\n\r\n    this.debouncedEditCell = debounceInput(this.editCell.bind(this));\r\n    this.editCell = this.editCell.bind(this);\r\n    this.addUnaryTestsListItem = this.addUnaryTestsListItem.bind(this);\r\n    this.onInput = this.onInput.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onOutputValueInputClick = this.onOutputValueInputClick.bind(this);\r\n    this.onUnaryTestsListChanged = this.onUnaryTestsListChanged.bind(this);\r\n    this.onUnaryTestsTypeChange = this.onUnaryTestsTypeChange.bind(this);\r\n  }\r\n\r\n  editCell(cell, text) {\r\n    this._modeling.editCell(cell, text);\r\n  }\r\n\r\n  /**\r\n   * Change type of unary tests.\r\n   */\r\n  onUnaryTestsTypeChange(value) {\r\n    const { items } = this.state;\r\n\r\n    const values = getValues(items);\r\n\r\n    const { element } = this.props.context;\r\n\r\n    if (value === DISJUNCTION) {\r\n      this.editCell(\r\n        element.businessObject,\r\n        values.join(',')\r\n      );\r\n\r\n      this.setState({\r\n        unaryTestsType: DISJUNCTION\r\n      });\r\n    } else {\r\n      this.editCell(element.businessObject, `not(${ values.join(',') })`);\r\n\r\n      this.setState({\r\n        unaryTestsType: NEGATION\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change list of unary tests.\r\n   */\r\n  onUnaryTestsListChanged(items) {\r\n\r\n    // get checked items\r\n    const values = getValues(items);\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const { unaryTestsType } = this.state;\r\n\r\n    if (unaryTestsType === DISJUNCTION) {\r\n      this.editCell(element.businessObject, values.join(','));\r\n    } else {\r\n      this.editCell(element.businessObject, `not(${ values.join(',') })`);\r\n    }\r\n\r\n    this.setState({\r\n      items,\r\n      isOutputValueInputChecked: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set output value to input value.\r\n   */\r\n  onOutputValueInputClick() {\r\n    const { element } = this.props.context;\r\n\r\n    const { inputValue, items } = this.state;\r\n\r\n    const parsedString = parseString(inputValue);\r\n\r\n    if (!parsedString || parsedString.values.length > 1) {\r\n      return;\r\n    }\r\n\r\n    this.editCell(element.businessObject, `${ parsedString.values.join('') }`);\r\n\r\n    // uncheck all other values\r\n    this.setState({\r\n      items: items.map(item => {\r\n        item.isChecked = false;\r\n\r\n        return item;\r\n      }),\r\n      isOutputValueInputChecked: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set output value if valid.\r\n   */\r\n  onInput({ isValid, value }) {\r\n    const { isOutputValueInputChecked } = this.state;\r\n\r\n    this.setState({\r\n      inputValue: value\r\n    });\r\n\r\n    const { element } = this.props.context;\r\n\r\n    if (!isInput(element) && isValid && isOutputValueInputChecked) {\r\n      this.debouncedEditCell(element.businessObject, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add new value on ENTER.\r\n   */\r\n  onKeyDown({ isValid, event }) {\r\n\r\n    if (!isEnter(event.keyCode)) {\r\n      return;\r\n    }\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const isInputClause = isInput(element.col);\r\n\r\n    // stop ENTER propagation (and ContextMenu close)\r\n    if (isInputClause || !isValid) {\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (isValid) {\r\n      if (isInputClause) {\r\n        this.addUnaryTestsListItem();\r\n      } else {\r\n        this.onOutputValueInputClick();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add unary tests to list.\r\n   */\r\n  addUnaryTestsListItem() {\r\n    const { inputValue, items, unaryTestsType } = this.state;\r\n\r\n    const parsedInput = parseString(inputValue);\r\n\r\n    if (!parsedInput) {\r\n      return;\r\n    }\r\n\r\n    const { element } = this.props.context;\r\n\r\n    const values = getValues(items);\r\n\r\n    const newValues = [].concat(\r\n      values,\r\n      parsedInput.values\r\n    );\r\n\r\n    if (unaryTestsType === DISJUNCTION) {\r\n      this.editCell(element.businessObject, newValues.join(','));\r\n    } else {\r\n      this.editCell(element.businessObject, `not(${ newValues.join(',') })`);\r\n    }\r\n\r\n    const newItems = items.concat(parsedInput.values.map(value => {\r\n      return {\r\n        value,\r\n        isChecked: true,\r\n        isRemovable: true,\r\n        group: 'Custom Values'\r\n      };\r\n    }));\r\n\r\n    this.setState({\r\n      items: newItems,\r\n      inputValue: ''\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { element } = this.props.context;\r\n\r\n    const { inputValue, isOutputValueInputChecked, items, unaryTestsType } = this.state;\r\n\r\n    const options = [{\r\n      label: 'Match one',\r\n      value: DISJUNCTION\r\n    }, {\r\n      label: 'Match none',\r\n      value: NEGATION\r\n    }];\r\n\r\n    const isInputClause = isInput(element.col);\r\n\r\n    const isNegation = unaryTestsType === NEGATION;\r\n\r\n    const showRadio = !isInputClause && items.length > 0;\r\n\r\n    return (\r\n      <div class=\"simple-string-edit context-menu-container\">\r\n\r\n        <h3 class=\"dms-heading\">\r\n          { this._translate('Edit String') }\r\n        </h3>\r\n\r\n        {\r\n          isInputClause &&\r\n            <p>\r\n              <InputSelect\r\n                noInput={ true }\r\n                ref={ node => this.selectNode = node }\r\n                onChange={ this.onUnaryTestsTypeChange }\r\n                options={ options }\r\n                value={ isNegation ? NEGATION : DISJUNCTION } />\r\n            </p>\r\n        }\r\n\r\n        <List\r\n          onChange={ this.onUnaryTestsListChanged }\r\n          items={ items }\r\n          type={ isInputClause ? 'checkbox' : 'radio' } />\r\n\r\n        {\r\n          isInputClause\r\n            ? <h4 className=\"dms-heading\">\r\n              { this._translate('Add Values') }\r\n            </h4>\r\n            : <h4 className=\"dms-heading\">\r\n              { this._translate('Set Value') }\r\n            </h4>\r\n        }\r\n\r\n        <div className=\"dms-fill-row\">\r\n          {\r\n            showRadio && <input\r\n              checked={ isOutputValueInputChecked }\r\n              className=\"cursor-pointer\"\r\n              onClick={ this.onOutputValueInputClick }\r\n              type=\"radio\"\r\n              style={ {\r\n                marginRight: '8px'\r\n              } } />\r\n          }\r\n\r\n          <ValidatedInput\r\n            className=\"dms-block\"\r\n            onKeyDown={ this.onKeyDown }\r\n            onInput={ this.onInput }\r\n            placeholder={ isInputClause ? '\"value\", \"value\", ...' : '\"value\"' }\r\n            type=\"text\"\r\n            validate={ value => {\r\n              if (!parseString(value)) {\r\n                return this._translate('Strings must be in double quotes.');\r\n              }\r\n            } }\r\n            value={ inputValue } />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// helpers //////////////////////\r\n\r\nfunction isEnter(keyCode) {\r\n  return keyCode === 13;\r\n}\r\n\r\n/**\r\n * Get array of actual values from array of items.\r\n *\r\n * @param {Array} items - Array of items.\r\n */\r\nfunction getValues(items) {\r\n  return items\r\n    .filter(item => item.isChecked)\r\n    .map(item => item.value);\r\n}\r\n\r\nfunction includes(array, value) {\r\n  return array.indexOf(value) !== -1;\r\n}"],"file":"SimpleStringEditContextMenuComponent.js"}