{"version":3,"sources":["../../../../src/features/simple-mode/components/SimpleModeButtonComponent.js"],"names":["Component","assign","closest","domClosest","inject","getNodeById","isInput","isOutput","OFFSET","SimpleModeButtonComponent","props","context","state","top","left","isVisible","isDisabled","selection","debounceInput","onClick","bind","handleSelectionChanged","hideAndShowDebounced","showDebounced","updatePosition","eventBus","on","off","hide","show","setState","elementId","elementRegistry","expressionLanguages","simpleMode","get","canSimpleEdit","expressionLanguage","getExpressionLanguage","isDefaultExpressionLanguage","node","renderer","container","getContainer","containerBounds","getBoundingClientRect","cellNode","id","cellBounds","nodeBounds","getTableContainerScroll","scrollLeft","scrollTop","nodePosition","width","classList","remove","add","height","style","element","fire","_container","classes","push","join","$inject","cell","businessObject","getDefaultExpressionLanguage","col","getDefault","value","tableContainer"],"mappings":"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","sourcesContent":["import { Component } from 'inferno';\r\n\r\nimport { assign } from 'min-dash';\r\n\r\nimport { closest as domClosest } from 'min-dom';\r\n\r\nimport { inject } from 'table-js/lib/components';\r\n\r\nimport {\r\n  getNodeById\r\n} from '../../cell-selection/CellSelectionUtil';\r\n\r\nimport { isInput, isOutput } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\nconst OFFSET = 4;\r\n\r\nexport default class SimpleModeButtonComponent extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      top: 0,\r\n      left: 0,\r\n      isVisible: false,\r\n      isDisabled: false,\r\n      selection: null\r\n    };\r\n\r\n    inject(this);\r\n\r\n    const { debounceInput } = this;\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n\r\n    this.handleSelectionChanged = this.handleSelectionChanged.bind(this);\r\n    this.hideAndShowDebounced = this.hideAndShowDebounced.bind(this);\r\n    this.showDebounced = debounceInput(this.showDebounced.bind(this));\r\n    this.updatePosition = this.updatePosition.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { eventBus } = this;\r\n\r\n    eventBus.on('cellSelection.changed', this.handleSelectionChanged);\r\n\r\n    eventBus.on('commandStack.changed', this.updatePosition);\r\n\r\n    eventBus.on('sheet.scroll', this.hideAndShowDebounced);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { eventBus } = this;\r\n\r\n    eventBus.off('cellSelection.changed', this.handleSelectionChanged);\r\n\r\n    eventBus.off('commandStack.changed', this.updatePosition);\r\n\r\n    eventBus.off('sheet.scroll', this.hideAndShowDebounced);\r\n  }\r\n\r\n  hideAndShowDebounced() {\r\n    this.hide();\r\n\r\n    this.showDebounced();\r\n  }\r\n\r\n  showDebounced() {\r\n    this.show();\r\n  }\r\n\r\n  hide(state = {}) {\r\n    this.setState({\r\n      ...state,\r\n      isVisible: false\r\n    });\r\n  }\r\n\r\n  show(state = {}) {\r\n    this.setState({\r\n      ...state,\r\n      isVisible: true\r\n    });\r\n\r\n    this.updatePosition();\r\n  }\r\n\r\n  handleSelectionChanged({ elementId }) {\r\n    const {\r\n      elementRegistry,\r\n      expressionLanguages,\r\n      simpleMode\r\n    } = this;\r\n\r\n    const selection = elementRegistry.get(elementId);\r\n\r\n    if (!selection || !simpleMode.canSimpleEdit(selection)) {\r\n      this.hide({\r\n        isDisabled: false,\r\n        selection: null\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const expressionLanguage = getExpressionLanguage(selection);\r\n\r\n    const isDisabled = !isDefaultExpressionLanguage(\r\n      selection,\r\n      expressionLanguage,\r\n      expressionLanguages\r\n    );\r\n\r\n    this.show({\r\n      isDisabled,\r\n      selection\r\n    });\r\n  }\r\n\r\n  // position button always on opposite site of context menu\r\n  updatePosition() {\r\n    const { selection } = this.state;\r\n\r\n    const { node } = this;\r\n\r\n    if (!selection || !node) {\r\n      return;\r\n    }\r\n\r\n    const { renderer } = this;\r\n\r\n    const container = renderer.getContainer(),\r\n          containerBounds = container.getBoundingClientRect();\r\n\r\n    const cellNode = getNodeById(selection.id, container);\r\n\r\n    const cellBounds = cellNode.getBoundingClientRect();\r\n\r\n    const nodeBounds = this.node.getBoundingClientRect();\r\n\r\n    const { scrollLeft, scrollTop } = getTableContainerScroll(node);\r\n\r\n    const nodePosition = {};\r\n\r\n    if (cellBounds.left + (cellBounds.width / 2) > containerBounds.width / 2) {\r\n\r\n      // left\r\n      nodePosition.left =\r\n        (-containerBounds.left\r\n        + cellBounds.left\r\n        - nodeBounds.width\r\n        + OFFSET\r\n        + scrollLeft)\r\n        + 'px';\r\n\r\n      node.classList.remove('right');\r\n      node.classList.add('left');\r\n    } else {\r\n\r\n      // right\r\n      nodePosition.left =\r\n        (-containerBounds.left\r\n        + cellBounds.left\r\n        + cellBounds.width\r\n        - OFFSET\r\n        + scrollLeft)\r\n        + 'px';\r\n\r\n      node.classList.remove('left');\r\n      node.classList.add('right');\r\n    }\r\n\r\n    if (cellBounds.top + (cellBounds.height / 2) > containerBounds.height / 2) {\r\n\r\n      // bottom\r\n      nodePosition.top =\r\n        (-containerBounds.top\r\n        + cellBounds.top\r\n        - nodeBounds.height\r\n        + OFFSET\r\n        + scrollTop)\r\n        + 'px';\r\n\r\n      node.classList.remove('top');\r\n      node.classList.add('bottom');\r\n\r\n    } else {\r\n\r\n      // top\r\n      nodePosition.top =\r\n        (-containerBounds.top\r\n        + cellBounds.top\r\n        - OFFSET\r\n        + scrollTop)\r\n        + 'px';\r\n\r\n      node.classList.remove('bottom');\r\n      node.classList.add('top');\r\n    }\r\n\r\n    assign(this.node.style, nodePosition);\r\n  }\r\n\r\n  onClick() {\r\n    const { eventBus } = this;\r\n\r\n    const { isDisabled } = this.state;\r\n\r\n    if (isDisabled) {\r\n      return;\r\n    }\r\n\r\n    const { selection } = this;\r\n\r\n    const element = selection.get();\r\n\r\n    if (!element) {\r\n      return;\r\n    }\r\n\r\n    eventBus.fire('simpleMode.open', {\r\n      element,\r\n      node: getNodeById(element.id, this._container)\r\n    });\r\n\r\n    this.hide();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isDisabled,\r\n      isVisible,\r\n      top,\r\n      left\r\n    } = this.state;\r\n\r\n    const classes = [\r\n      'simple-mode-button',\r\n      'no-deselect'\r\n    ];\r\n\r\n    if (isDisabled) {\r\n      classes.push('disabled');\r\n    }\r\n\r\n    return (\r\n      isVisible\r\n        ? <div\r\n          className={ classes.join(' ') }\r\n          onClick={ this.onClick }\r\n          ref={ node => this.node = node }\r\n          style={ { top, left } }\r\n          title={ isDisabled\r\n            ? 'Editing not supported for set expression language'\r\n            : 'Edit' }><span className=\"dmn-icon-edit\"></span></div>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\nSimpleModeButtonComponent.$inject = [\r\n  'debounceInput',\r\n  'elementRegistry',\r\n  'eventBus',\r\n  'expressionLanguages',\r\n  'renderer',\r\n  'selection',\r\n  'simpleMode'\r\n];\r\n\r\n// helpers //////////////////////\r\n\r\n/**\r\n * Return set expression language if found.\r\n *\r\n * @param {Cell} cell - Cell.\r\n */\r\nfunction getExpressionLanguage(cell) {\r\n  return cell.businessObject.expressionLanguage;\r\n}\r\n\r\nfunction isDefaultExpressionLanguage(cell, expressionLanguage, expressionLanguages) {\r\n  return !expressionLanguage ||\r\n    expressionLanguage === getDefaultExpressionLanguage(cell, expressionLanguages);\r\n}\r\n\r\nfunction getDefaultExpressionLanguage(cell, expressionLanguages) {\r\n  if (isInput(cell.col)) {\r\n    return expressionLanguages.getDefault('inputCell').value;\r\n  } else if (isOutput(cell.col)) {\r\n    return expressionLanguages.getDefault('outputCell').value;\r\n  }\r\n}\r\n\r\nfunction getTableContainerScroll(node) {\r\n  const tableContainer = domClosest(node, '.tjs-table-container');\r\n\r\n  if (!tableContainer) {\r\n    return {\r\n      scrollTop: 0,\r\n      scrollLeft: 0\r\n    };\r\n  }\r\n\r\n  const { scrollLeft, scrollTop } = tableContainer;\r\n\r\n  return {\r\n    scrollTop,\r\n    scrollLeft\r\n  };\r\n}"],"file":"SimpleModeButtonComponent.js"}