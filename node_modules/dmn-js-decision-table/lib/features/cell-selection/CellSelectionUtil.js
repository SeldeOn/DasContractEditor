function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { closest, matches, query } from 'min-dom';
import cssEscape from 'css.escape';
import { setRange, getRange } from 'selection-ranges';
export var SELECTABLE_SELECTOR = '[contenteditable]';
export var ELEMENT_SELECTOR = '[data-element-id]';
export function getElementId(node) {
  return node.getAttribute('data-element-id');
}
export function getElementCoords(node) {
  var coordsAttr = node.getAttribute('data-coords');

  if (!coordsAttr) {
    return null;
  }

  var _coordsAttr$split = coordsAttr.split(':'),
      _coordsAttr$split2 = _slicedToArray(_coordsAttr$split, 2),
      row = _coordsAttr$split2[0],
      col = _coordsAttr$split2[1];

  return {
    row: row,
    col: col
  };
}
export function getNodeByCoords(elementCoords, container) {
  var coordsAttr = "".concat(elementCoords.row, ":").concat(elementCoords.col);
  return query("[data-coords=\"".concat(cssEscape(coordsAttr), "\"]"), container);
}
export function getNodeById(elementId, container) {
  return query("[data-element-id=\"".concat(cssEscape(elementId), "\"]"), container);
}
export function isUnselectableNode(node) {
  return closest(node, '.no-deselect', true);
}
/**
 * Find semantically _selectable_ element in the nodes ancestors.
 *
 * @param {Element} node
 *
 * @return {Element} node
 */

export function findSelectableAncestor(node) {
  return closest(node, ELEMENT_SELECTOR, true);
}
/**
 * Return focusable node in selectable el.
 *
 * @param  {Element} el
 *
 * @return {Element}
 */

export function getFocusableNode(el) {
  var selector = SELECTABLE_SELECTOR;
  return matches(el, selector) ? el : query(selector, el);
}
/**
 * Ensure element or element childNode has the proper focus.
 *
 * @param {Element} el
 */

export function ensureFocus(el) {
  var focusEl = getFocusableNode(el);

  if (!focusEl) {
    return;
  } // QUIRK: otherwise range and focus related actions may
  // yield errors in older browsers (PhantomJS / IE)


  if (!document.body.contains(focusEl)) {
    return;
  } // nothing to do, if element already has focus


  if (document.activeElement === focusEl) {
    return;
  } // (1) focus


  focusEl.focus(); // (2) set cursor to element end

  var range = getRange(focusEl);

  if (!range || range.end === 0) {
    setRange(focusEl, {
      start: 5000,
      end: 5000
    });
  }
}
//# sourceMappingURL=CellSelectionUtil.js.map