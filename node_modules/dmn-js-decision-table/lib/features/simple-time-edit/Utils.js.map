{"version":3,"sources":["../../../src/features/simple-time-edit/Utils.js"],"names":["ISO_TIME_REGEX","BETWEEN_TIME_REGEX","BEFORE_AFTER_TIME_REGEX","EXACT_TIME_REGEX","EXACT","BEFORE","AFTER","BETWEEN","validateISOString","string","test","trim","getTimeString","type","times","getSampleTime","time","Date","toISOString","slice","parseString","matches","match"],"mappings":"AAAA,IAAMA,cAAc,GAAG,0CAAvB;AAEA,IAAMC,kBAAkB,GAAG,4CAA3B;AAEA,IAAMC,uBAAuB,GAAG,6BAAhC;AAEA,IAAMC,gBAAgB,GAAG,qBAAzB;AAEA,IAAMC,KAAK,GAAG,OAAd;AAAA,IACMC,MAAM,GAAG,QADf;AAAA,IAEMC,KAAK,GAAG,OAFd;AAAA,IAGMC,OAAO,GAAG,SAHhB;AAKA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AACxC,MAAI,CAACT,cAAc,CAACU,IAAf,CAAoBD,MAAM,CAACE,IAAP,EAApB,CAAL,EAAyC;AACvC,WAAO,8CAAP;AACD;AACF;AAED,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoC;AACzC,MAAID,IAAI,KAAKT,KAAb,EAAoB;AAClB,4BAAiBU,KAAK,CAAC,CAAD,CAAtB;AACD,GAFD,MAEO,IAAID,IAAI,KAAKR,MAAb,EAAqB;AAC1B,8BAAmBS,KAAK,CAAC,CAAD,CAAxB;AACD,GAFM,MAEA,IAAID,IAAI,KAAKP,KAAb,EAAoB;AACzB,8BAAmBQ,KAAK,CAAC,CAAD,CAAxB;AACD,GAFM,MAEA,IAAID,IAAI,KAAKN,OAAb,EAAsB;AAC3B,6BAAkBO,KAAK,CAAC,CAAD,CAAvB,yBAAyCA,KAAK,CAAC,CAAD,CAA9C;AACD;AACF;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B,MAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AAEA,SAAOD,IAAI,CAACE,WAAL,GAAmBC,KAAnB,CAAyB,EAAzB,EAA6B,CAAC,CAA9B,IAAmC,GAA1C;AACD;AAED,OAAO,SAASC,WAAT,CAAqBX,MAArB,EAA6B;AAElC;AACA,MAAI,CAACA,MAAD,IAAWA,MAAM,CAACE,IAAP,OAAkB,EAAjC,EAAqC;AACnC,WAAO;AACLE,MAAAA,IAAI,EAAE,OADD;AAELG,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID,GARiC,CAUlC;;;AACA,MAAIK,OAAO,GAAGZ,MAAM,CAACa,KAAP,CAAarB,kBAAb,CAAd;;AAEA,MAAIoB,OAAJ,EAAa;AACX,WAAO;AACLR,MAAAA,IAAI,EAAE,SADD;AAELC,MAAAA,KAAK,EAAE,CAAEO,OAAO,CAAC,CAAD,CAAT,EAAcA,OAAO,CAAC,CAAD,CAArB;AAFF,KAAP;AAID,GAlBiC,CAoBlC;;;AACAA,EAAAA,OAAO,GAAGZ,MAAM,CAACa,KAAP,CAAapB,uBAAb,CAAV;;AAEA,MAAImB,OAAJ,EAAa;AACX,WAAO;AACLR,MAAAA,IAAI,EAAEQ,OAAO,CAAC,CAAD,CAAP,KAAe,GAAf,GAAqB,QAArB,GAAgC,OADjC;AAELL,MAAAA,IAAI,EAAEK,OAAO,CAAC,CAAD;AAFR,KAAP;AAID,GA5BiC,CA8BlC;;;AACAA,EAAAA,OAAO,GAAGZ,MAAM,CAACa,KAAP,CAAanB,gBAAb,CAAV;;AAEA,MAAIkB,OAAJ,EAAa;AACX,WAAO;AACLR,MAAAA,IAAI,EAAE,OADD;AAELG,MAAAA,IAAI,EAAEK,OAAO,CAAC,CAAD;AAFR,KAAP;AAID;AACF","sourcesContent":["const ISO_TIME_REGEX = /^(?:\\d\\d:){2}\\d\\d(?:Z|(?:[@+-][^\")]+))?$/;\n\nconst BETWEEN_TIME_REGEX = /^\\[time\\(\"([^\"]*)\"\\)..time\\(\"([^\"]*)\"\\)\\]$/;\n\nconst BEFORE_AFTER_TIME_REGEX = /^(<|>)\\s*time\\(\"([^\"]*)\"\\)$/;\n\nconst EXACT_TIME_REGEX = /^time\\(\"([^\"]*)\"\\)$/;\n\nconst EXACT = 'exact',\n      BEFORE = 'before',\n      AFTER = 'after',\n      BETWEEN = 'between';\n\nexport function validateISOString(string) {\n  if (!ISO_TIME_REGEX.test(string.trim())) {\n    return 'Time must match pattern hh:mm:ss[time zone].';\n  }\n}\n\nexport function getTimeString(type, times) {\n  if (type === EXACT) {\n    return `time(\"${ times[0] }\")`;\n  } else if (type === BEFORE) {\n    return `< time(\"${ times[0] }\")`;\n  } else if (type === AFTER) {\n    return `> time(\"${ times[0] }\")`;\n  } else if (type === BETWEEN) {\n    return `[time(\"${ times[0] }\")..time(\"${ times[1] }\")]`;\n  }\n}\n\nexport function getSampleTime() {\n  const time = new Date();\n\n  return time.toISOString().slice(11, -5) + 'Z';\n}\n\nexport function parseString(string) {\n\n  // emtpy\n  if (!string || string.trim() === '') {\n    return {\n      type: 'exact',\n      time: ''\n    };\n  }\n\n  // between\n  let matches = string.match(BETWEEN_TIME_REGEX);\n\n  if (matches) {\n    return {\n      type: 'between',\n      times: [ matches[1], matches[2] ]\n    };\n  }\n\n  // before or after\n  matches = string.match(BEFORE_AFTER_TIME_REGEX);\n\n  if (matches) {\n    return {\n      type: matches[1] === '<' ? 'before' : 'after',\n      time: matches[2]\n    };\n  }\n\n  // exact\n  matches = string.match(EXACT_TIME_REGEX);\n\n  if (matches) {\n    return {\n      type: 'exact',\n      time: matches[1]\n    };\n  }\n}"],"file":"Utils.js"}