function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import { createVNode, createComponentVNode, createTextVNode } from "inferno";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { Component } from 'inferno';
import ValidatedInput from 'dmn-js-shared/lib/components/ValidatedInput';
import InputSelect from 'dmn-js-shared/lib/components/InputSelect';
import { getTimeString, getSampleTime, validateISOString, parseString } from '../Utils';
var EXACT = 'exact',
    BEFORE = 'before',
    AFTER = 'after',
    BETWEEN = 'between';

var InputTimeEdit = /*#__PURE__*/function (_Component) {
  _inherits(InputTimeEdit, _Component);

  var _super = _createSuper(InputTimeEdit);

  function InputTimeEdit(props, context) {
    var _this;

    _classCallCheck(this, InputTimeEdit);

    _this = _super.call(this, props, context);
    _this._modeling = context.injector.get('modeling');
    var element = _this.props.context.element;
    var parsedString = parseString(element.businessObject.text);

    if (parsedString) {
      var times;

      if (parsedString.time) {
        times = [parsedString.time, ''];
      } else if (parsedString.times) {
        times = parsedString.times;
      } else {
        times = ['', ''];
      }

      _this.state = {
        type: parsedString.type,
        times: times
      };
    } else {
      _this.state = {
        type: EXACT,
        times: ['', '']
      };
    }

    var debounceInput = context.injector.get('debounceInput');
    _this.debouncedEditCell = debounceInput(_this.editCell.bind(_assertThisInitialized(_this)));
    _this.editCell = _this.editCell.bind(_assertThisInitialized(_this));
    _this.onTypeChange = _this.onTypeChange.bind(_assertThisInitialized(_this));
    _this.onSetStartTimeNowClick = _this.onSetStartTimeNowClick.bind(_assertThisInitialized(_this));
    _this.onSetEndTimeNowClick = _this.onSetEndTimeNowClick.bind(_assertThisInitialized(_this));
    _this.onStartTimeInput = _this.onStartTimeInput.bind(_assertThisInitialized(_this));
    _this.onEndTimeInput = _this.onEndTimeInput.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(InputTimeEdit, [{
    key: "editCell",
    value: function editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
  }, {
    key: "onTypeChange",
    value: function onTypeChange(value) {
      var element = this.props.context.element;
      var times = this.state.times;
      this.setState({
        type: value
      });

      if (parseString(getTimeString(value, times))) {
        this.editCell(element.businessObject, getTimeString(value, times));
      }
    }
  }, {
    key: "onSetStartTimeNowClick",
    value: function onSetStartTimeNowClick() {
      var element = this.props.context.element;
      var _this$state = this.state,
          times = _this$state.times,
          type = _this$state.type;
      var time = getSampleTime();
      this.setState({
        times: [time, times[1]]
      });

      if (parseString(getTimeString(type, [time, times[1]]))) {
        this.editCell(element.businessObject, getTimeString(type, [time, times[1]]));
      }
    }
  }, {
    key: "onSetEndTimeNowClick",
    value: function onSetEndTimeNowClick() {
      var element = this.props.context.element;
      var _this$state2 = this.state,
          times = _this$state2.times,
          type = _this$state2.type;
      var time = getSampleTime();
      this.setState({
        times: [times[0], time]
      });

      if (parseString(getTimeString(type, [times[0], time]))) {
        this.editCell(element.businessObject, getTimeString(type, [times[0], time]));
      }
    }
  }, {
    key: "onStartTimeInput",
    value: function onStartTimeInput(_ref) {
      var value = _ref.value;
      var element = this.props.context.element;
      var _this$state3 = this.state,
          times = _this$state3.times,
          type = _this$state3.type;
      this.setState({
        times: [value, times[1]]
      });
      this.debouncedEditCell(element.businessObject, getTimeString(type, [value, times[1]]));
    }
  }, {
    key: "onEndTimeInput",
    value: function onEndTimeInput(_ref2) {
      var value = _ref2.value;
      var element = this.props.context.element;
      var _this$state4 = this.state,
          times = _this$state4.times,
          type = _this$state4.type;
      this.setState({
        times: [times[0], value]
      });
      this.debouncedEditCell(element.businessObject, getTimeString(type, [times[0], value]));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state5 = this.state,
          times = _this$state5.times,
          type = _this$state5.type;
      var options = [{
        label: 'Exactly',
        value: EXACT
      }, {
        label: 'Before',
        value: BEFORE
      }, {
        label: 'After',
        value: AFTER
      }, {
        label: 'Between',
        value: BETWEEN
      }];
      return createVNode(1, "div", "context-menu-container simple-time-edit", [createVNode(1, "h3", "dms-heading", createTextVNode("Edit time"), 2), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onTypeChange,
        "options": options,
        "value": type
      }), 2), createVNode(1, "h4", "dms-heading", type === BETWEEN ? 'Edit start time' : 'Set time', 0), createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "start-time-input dms-block",
        "onInput": this.onStartTimeInput,
        "placeholder": "e.g. ".concat(getSampleTime()),
        "validate": validateISOString,
        "value": times[0]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-now", createTextVNode("Use now"), 2, {
        "type": "button",
        "onClick": this.onSetStartTimeNowClick
      }), createTextVNode(".")], 4)], 4), type === BETWEEN && createVNode(1, "h4", "dms-heading", createTextVNode("Edit end time"), 2), type === BETWEEN && createVNode(1, "div", null, [createComponentVNode(2, ValidatedInput, {
        "className": "end-time-input dms-block",
        "onInput": this.onEndTimeInput,
        "placeholder": "e.g. ".concat(getSampleTime()),
        "validate": validateISOString,
        "value": times[1]
      }), createVNode(1, "p", "dms-hint", [createVNode(1, "button", "use-now", createTextVNode("Use now"), 2, {
        "type": "button",
        "onClick": this.onSetEndTimeNowClick
      }), createTextVNode(".")], 4)], 4)], 0);
    }
  }]);

  return InputTimeEdit;
}(Component);

export { InputTimeEdit as default };
//# sourceMappingURL=InputTimeEdit.js.map