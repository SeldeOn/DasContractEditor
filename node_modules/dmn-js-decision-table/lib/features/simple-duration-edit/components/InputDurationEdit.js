function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import { createVNode, createComponentVNode, createTextVNode } from "inferno";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import { Component } from 'inferno';
import InputSelect from 'dmn-js-shared/lib/components/InputSelect';
import { DurationInput } from './DurationInput';
import { getComparisonString, getRangeString, parseDuration } from '../Utils';
var COMPARISON = 'comparison',
    RANGE = 'range'; // adapted from InputNumberEdit

var InputDurationEdit = /*#__PURE__*/function (_Component) {
  _inherits(InputDurationEdit, _Component);

  var _super = _createSuper(InputDurationEdit);

  function InputDurationEdit(props, context) {
    var _this;

    _classCallCheck(this, InputDurationEdit);

    _this = _super.call(this, props, context);
    _this._modeling = context.injector.get('modeling');
    var element = _this.props.context.element;
    _this._type = getTypeRef(element);
    var parsedString = parseDuration(element.businessObject.text, _this._type);

    if (parsedString) {
      _this.state = {
        type: parsedString.type,
        comparisonOperator: parsedString.operator || 'equals',
        startValue: parsedString.values[0] || '',
        endValue: parsedString.values[1] || '',
        rangeStartType: parsedString.start || 'include',
        rangeEndType: parsedString.end || 'include'
      };
    } else {
      _this.state = {
        type: COMPARISON,
        comparisonOperator: 'equals',
        startValue: '',
        endValue: '',
        rangeStartType: 'include',
        rangeEndType: 'include'
      };
    }

    var debounceInput = context.injector.get('debounceInput');
    _this.debouncedEditCell = debounceInput(_this.editCell.bind(_assertThisInitialized(_this)));
    _this.editCell = _this.editCell.bind(_assertThisInitialized(_this));
    _this.onComparisonOperatorChange = _this.onComparisonOperatorChange.bind(_assertThisInitialized(_this));
    _this.onComparisonValueChange = _this.onComparisonValueChange.bind(_assertThisInitialized(_this));
    _this.onTypeChange = _this.onTypeChange.bind(_assertThisInitialized(_this));
    _this.onRangeStartTypeChange = _this.onRangeStartTypeChange.bind(_assertThisInitialized(_this));
    _this.onRangeStartValueChange = _this.onRangeStartValueChange.bind(_assertThisInitialized(_this));
    _this.onRangeEndTypeChange = _this.onRangeEndTypeChange.bind(_assertThisInitialized(_this));
    _this.onRangeEndValueChange = _this.onRangeEndValueChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(InputDurationEdit, [{
    key: "editCell",
    value: function editCell(cell, text) {
      this._modeling.editCell(cell, text);
    }
  }, {
    key: "onTypeChange",
    value: function onTypeChange(value) {
      var element = this.props.context.element;
      var _this$state = this.state,
          comparisonOperator = _this$state.comparisonOperator,
          startValue = _this$state.startValue,
          endValue = _this$state.endValue,
          rangeStartType = _this$state.rangeStartType,
          rangeEndType = _this$state.rangeEndType;

      if (value === COMPARISON) {
        this.editCell(element.businessObject, getComparisonString(comparisonOperator, startValue));
      } else {
        this.editCell(element.businessObject, getRangeString(startValue, endValue, rangeStartType, rangeEndType));
      }

      this.setState({
        type: value
      });
    }
  }, {
    key: "onComparisonOperatorChange",
    value: function onComparisonOperatorChange(value) {
      var element = this.props.context.element;
      var _this$state2 = this.state,
          type = _this$state2.type,
          startValue = _this$state2.startValue;

      if (type === COMPARISON) {
        this.editCell(element.businessObject, getComparisonString(value, startValue));
        this.setState({
          comparisonOperator: value
        });
      }
    }
  }, {
    key: "onComparisonValueChange",
    value: function onComparisonValueChange(comparisonValue) {
      var element = this.props.context.element;
      var _this$state3 = this.state,
          type = _this$state3.type,
          comparisonOperator = _this$state3.comparisonOperator;

      if (type === COMPARISON) {
        this.debouncedEditCell(element.businessObject, getComparisonString(comparisonOperator, comparisonValue));
        this.setState({
          startValue: comparisonValue
        });
      }
    }
  }, {
    key: "onRangeStartTypeChange",
    value: function onRangeStartTypeChange(value) {
      var element = this.props.context.element;
      var _this$state4 = this.state,
          type = _this$state4.type,
          startValue = _this$state4.startValue,
          endValue = _this$state4.endValue,
          rangeEndType = _this$state4.rangeEndType;

      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(startValue, endValue, value, rangeEndType));
        this.setState({
          rangeStartType: value
        });
      }
    }
  }, {
    key: "onRangeStartValueChange",
    value: function onRangeStartValueChange(value) {
      var element = this.props.context.element;
      var _this$state5 = this.state,
          type = _this$state5.type,
          endValue = _this$state5.endValue,
          rangeStartType = _this$state5.rangeStartType,
          rangeEndType = _this$state5.rangeEndType;

      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(value, endValue, rangeStartType, rangeEndType));
        this.setState({
          startValue: value
        });
      }
    }
  }, {
    key: "onRangeEndTypeChange",
    value: function onRangeEndTypeChange(value) {
      var element = this.props.context.element;
      var _this$state6 = this.state,
          type = _this$state6.type,
          startValue = _this$state6.startValue,
          endValue = _this$state6.endValue,
          rangeStartType = _this$state6.rangeStartType;

      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(startValue, endValue, rangeStartType, value));
        this.setState({
          rangeEndType: value
        });
      }
    }
  }, {
    key: "onRangeEndValueChange",
    value: function onRangeEndValueChange(value) {
      var element = this.props.context.element;
      var _this$state7 = this.state,
          type = _this$state7.type,
          startValue = _this$state7.startValue,
          rangeStartType = _this$state7.rangeStartType,
          rangeEndType = _this$state7.rangeEndType;

      if (type === RANGE) {
        this.editCell(element.businessObject, getRangeString(startValue, value, rangeStartType, rangeEndType));
        this.setState({
          endValue: value
        });
      }
    }
  }, {
    key: "renderComparison",
    value: function renderComparison(comparisonOperator, comparisonValue) {
      var comparisonOperatorOptions = [{
        label: 'Equals',
        value: 'equals'
      }, {
        label: 'Less',
        value: 'less'
      }, {
        label: 'Less or equals',
        value: 'lessEquals'
      }, {
        label: 'Greater',
        value: 'greater'
      }, {
        label: 'Greater or equals',
        value: 'greaterEquals'
      }];
      return createVNode(1, "div", "comparison", [createVNode(1, "h4", "dms-heading", createTextVNode("Value"), 2), createVNode(1, "div", "dms-fill-row dms-input-duration-edit-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onComparisonOperatorChange,
        "options": comparisonOperatorOptions,
        "value": comparisonOperator
      }), createTextVNode("\xA0"), createComponentVNode(2, DurationInput, {
        "type": this._type,
        "className": "comparison-duration-input",
        "onInput": this.onComparisonValueChange,
        "value": comparisonValue
      })], 4)], 4);
    }
  }, {
    key: "renderRange",
    value: function renderRange(rangeStartValue, rangeEndValue, rangeStartType, rangeEndType) {
      var rangeTypeOptions = [{
        label: 'Include',
        value: 'include'
      }, {
        label: 'Exclude',
        value: 'exclude'
      }];
      return createVNode(1, "div", "range", [createVNode(1, "h4", "dms-heading", createTextVNode("Start value"), 2), createVNode(1, "div", "dms-fill-row dms-input-duration-edit-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onRangeStartTypeChange,
        "options": rangeTypeOptions,
        "value": rangeStartType
      }), createTextVNode("\xA0"), createComponentVNode(2, DurationInput, {
        "type": this._type,
        "className": "range-start-duration-input",
        "onInput": this.onRangeStartValueChange,
        "value": rangeStartValue
      })], 4), createVNode(1, "h4", "dms-heading", createTextVNode("End value"), 2), createVNode(1, "div", "dms-fill-row dms-input-duration-edit-row", [createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onRangeEndTypeChange,
        "options": rangeTypeOptions,
        "value": rangeEndType
      }), createTextVNode("\xA0"), createComponentVNode(2, DurationInput, {
        "type": this._type,
        "className": "range-end-duration-input",
        "onInput": this.onRangeEndValueChange,
        "value": rangeEndValue
      })], 4)], 4);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state8 = this.state,
          type = _this$state8.type,
          comparisonOperator = _this$state8.comparisonOperator,
          startValue = _this$state8.startValue,
          endValue = _this$state8.endValue,
          rangeStartType = _this$state8.rangeStartType,
          rangeEndType = _this$state8.rangeEndType;
      var typeOptions = [{
        label: 'Comparison',
        value: COMPARISON
      }, {
        label: 'Range',
        value: RANGE
      }];
      return createVNode(1, "div", "context-menu-container simple-duration-edit", [createVNode(1, "h3", "dms-heading", createTextVNode("Edit duration"), 2), createVNode(1, "div", "dms-fill-row", createComponentVNode(2, InputSelect, {
        "noInput": true,
        "onChange": this.onTypeChange,
        "options": typeOptions,
        "value": type
      }), 2), type === COMPARISON && this.renderComparison(comparisonOperator, startValue), type === RANGE && this.renderRange(startValue, endValue, rangeStartType, rangeEndType)], 0);
    }
  }]);

  return InputDurationEdit;
}(Component);

export { InputDurationEdit as default };

function getTypeRef(element) {
  return element.col.businessObject.inputExpression.typeRef;
}
//# sourceMappingURL=InputDurationEdit.js.map