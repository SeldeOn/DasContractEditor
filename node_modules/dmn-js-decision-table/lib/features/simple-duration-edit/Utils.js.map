{"version":3,"sources":["../../../src/features/simple-duration-edit/Utils.js"],"names":["keys","operators","equals","less","lessEquals","greater","greaterEquals","getOperatorName","string","filter","key","parseDuration","text","isEmptyString","trim","type","values","parsedComparison","parseComparison","parsedRange","parseRange","getComparisonString","comparisonOperator","comparisonValue","getRangeString","rangeStartValue","rangeEndValue","rangeStartType","rangeEndType","rangeStartChar","rangeEndChar","validateDuration","value","validateYearMonthDuration","validateDayTimeDuration","test","withoutDurationCall","result","exec","exactValue","operator","match","start","end","firstValue","secondValue","regex","input","groups"],"mappings":"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","sourcesContent":["import { keys } from 'min-dash';\n\nexport const operators = {\n  equals: '=',\n  less: '<',\n  lessEquals: '<=',\n  greater: '>',\n  greaterEquals: '>='\n};\n\nfunction getOperatorName(string) {\n  return keys(operators).filter(key => {\n    return string === operators[ key ];\n  })[0];\n}\n\nexport function parseDuration(text) {\n  if (!text || isEmptyString(text.trim())) {\n    return {\n      type: 'comparison',\n      values: []\n    };\n  }\n\n  const parsedComparison = parseComparison(text);\n\n  if (parsedComparison) {\n    return parsedComparison;\n  }\n\n  const parsedRange = parseRange(text);\n\n  if (parsedRange) {\n    return parsedRange;\n  }\n}\n\nexport function isEmptyString(string) {\n  return string === '';\n}\n\nexport function getComparisonString(comparisonOperator, comparisonValue) {\n  if (comparisonOperator === 'equals') {\n    return `duration(\"${ comparisonValue }\")`;\n  } else {\n    return `${ operators[comparisonOperator] } duration(\"${ comparisonValue }\")`;\n  }\n}\n\nexport function getRangeString(\n    rangeStartValue,\n    rangeEndValue,\n    rangeStartType,\n    rangeEndType) {\n  const rangeStartChar = rangeStartType === 'exclude' ? ']' : '[',\n        rangeEndChar = rangeEndType === 'exclude' ? '[' : ']';\n\n  return `${ rangeStartChar }duration(\"${ rangeStartValue }\")` +\n    `..duration(\"${ rangeEndValue }\")${ rangeEndChar }`;\n}\n\nexport function validateDuration(type, value) {\n  if (type === 'yearMonthDuration') {\n    return validateYearMonthDuration(value);\n  } else if (type === 'dayTimeDuration') {\n    return validateDayTimeDuration(value);\n  }\n}\n\nfunction validateYearMonthDuration(value) {\n  return /^P(\\d+Y\\d+M|\\d+Y|\\d+M)$/.test(value);\n}\n\nfunction validateDayTimeDuration(value) {\n  return /^P(\\d+DT\\d+H|\\d+D|T\\d+H)$/.test(value);\n}\n\nexport function withoutDurationCall(text) {\n  const result = /^duration\\(\"([^\"]*)\"\\)$/.exec(text);\n  return result && result[1];\n}\n\nfunction parseComparison(text) {\n  const exactValue = withoutDurationCall(text);\n\n  if (exactValue) {\n    return {\n      type: 'comparison',\n      operator: 'equals',\n      values: [ exactValue ]\n    };\n  }\n\n  const {\n    operator,\n    value\n  } = match(/^(?<operator>=|(:?<|>)=?)\\s*duration\\(\"(?<value>[^\"]*)\"\\)$/, text);\n\n  if (operator && value) {\n    return {\n      type: 'comparison',\n      values: [ value ],\n      operator: getOperatorName(operator)\n    };\n  }\n}\n\nfunction parseRange(text) {\n  const {\n    start,\n    end,\n    firstValue,\n    secondValue\n  // eslint-disable-next-line\n  } = match(/^(?<start>[[\\]])duration\\(\"(?<firstValue>[^\"]*)\"\\)\\.\\.duration\\(\"(?<secondValue>[^\"]*)\"\\)(?<end>[[\\]])$/, text);\n\n  if (start && end) {\n    return {\n      type: 'range',\n      values: [ firstValue, secondValue ],\n      start: start === ']' ? 'exclude' : 'include',\n      end: end === '[' ? 'exclude' : 'include'\n    };\n  }\n}\n\nfunction match(regex, input) {\n  const {\n    groups\n  } = regex.exec(input) || { groups: {} };\n\n  return groups;\n}\n"],"file":"Utils.js"}