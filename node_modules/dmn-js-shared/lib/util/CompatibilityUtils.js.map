{"version":3,"sources":["../../src/util/CompatibilityUtils.js"],"names":["isFunction","wrapForCompatibility","api","window","Promise","Error","argLen","arguments","length","callback","console","warn","replaceBoundPrefix","name","argsWithoutCallback","Array","prototype","slice","call","apply","then","result","firstKey","Object","keys","err","warnings","string","replace"],"mappings":"AAAA,SAASA,UAAT,QAA2B,UAA3B,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,GAA9B,EAAmC;AAExC,SAAO,YAAW;AAEhB,QAAI,CAACC,MAAM,CAACC,OAAZ,EAAqB;AACnB,YAAM,IAAIC,KAAJ,CAAU,mDAChB,2BADM,CAAN;AAED;;AAED,QAAIC,MAAM,GAAGC,SAAS,CAACC,MAAvB;;AACA,QAAIF,MAAM,IAAI,CAAV,IAAeN,UAAU,CAACO,SAAS,CAACD,MAAM,GAAG,CAAV,CAAV,CAA7B,EAAsD;AAEpD,UAAIG,QAAQ,GAAGF,SAAS,CAACD,MAAM,GAAG,CAAV,CAAxB;AAEAI,MAAAA,OAAO,CAACC,IAAR,CAAa,IAAIN,KAAJ,CACX,0BAA0BO,kBAAkB,CAACV,GAAG,CAACW,IAAL,CAA5C,GACA,gEADA,GAEA,sEAHW,CAAb;AAMA,UAAIC,mBAAmB,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BX,SAA3B,EAAsC,CAAtC,EAAyC,CAAC,CAA1C,CAA1B;AAEAL,MAAAA,GAAG,CAACiB,KAAJ,CAAU,IAAV,EAAgBL,mBAAhB,EAAqCM,IAArC,CAA0C,UAASC,MAAT,EAAiB;AAEzD,YAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoB,CAApB,CAAf,CAFyD,CAIzD;AACA;AACA;;AACA,eAAOZ,QAAQ,CAAC,IAAD,EAAOY,MAAM,CAACC,QAAD,CAAb,CAAf,CAPyD,CASzD;AACA;AACD,OAXD,EAWG,UAASG,GAAT,EAAc;AAEf,eAAOhB,QAAQ,CAACgB,GAAD,EAAMA,GAAG,CAACC,QAAV,CAAf;AACD,OAdD;AAeD,KA3BD,MA2BO;AAEL,aAAOxB,GAAG,CAACiB,KAAJ,CAAU,IAAV,EAAgBZ,SAAhB,CAAP;AACD;AACF,GAvCD;AAwCD,C,CAGD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASK,kBAAT,CAA4Be,MAA5B,EAAoC;AAClC,SAAOA,MAAM,CAACC,OAAP,CAAe,QAAf,EAAyB,EAAzB,CAAP;AACD","sourcesContent":["import { isFunction } from 'min-dash';\n\n// TODO: remove with future dmn-js version\n\n/**\n * Wraps APIs to check:\n *\n * 1) If a callback is passed -> Warn users about callback deprecation.\n * 2) If Promise class is implemented in current environment.\n *\n * @private\n */\nexport function wrapForCompatibility(api) {\n\n  return function() {\n\n    if (!window.Promise) {\n      throw new Error('Promises is not supported in this environment.' +\n      ' Please polyfill Promise.');\n    }\n\n    var argLen = arguments.length;\n    if (argLen >= 1 && isFunction(arguments[argLen - 1])) {\n\n      var callback = arguments[argLen - 1];\n\n      console.warn(new Error(\n        'Passing callbacks to ' + replaceBoundPrefix(api.name) +\n        ' is deprecated and will be removed in a future major release. ' +\n        'Please switch to promises: https://bpmn.io/l/moving-to-promises.html'\n      ));\n\n      var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);\n\n      api.apply(this, argsWithoutCallback).then(function(result) {\n\n        var firstKey = Object.keys(result)[0];\n\n        // The APIs we are wrapping all resolve a single item depending on the API.\n        // For instance, importXML resolves { warnings } and saveXML returns { xml }.\n        // That's why we can call the callback with the first item of result.\n        return callback(null, result[firstKey]);\n\n        // Passing a second paramter instead of catch because we don't want to\n        // catch errors thrown by callback().\n      }, function(err) {\n\n        return callback(err, err.warnings);\n      });\n    } else {\n\n      return api.apply(this, arguments);\n    }\n  };\n}\n\n\n// helper ////////\n\n/**\n * replaceBoundPrefix - replace the <bound > prefix from a string. Can be used\n * when logging the name of an API, not being sure whether is was bound or not.\n *\n * @param  {string} string\n * @return {string} the string without the <bound > prefix. If no <bound > prefix\n * was present, the same string will be returned.\n */\nfunction replaceBoundPrefix(string) {\n  return string.replace('bound ', '');\n}\n"],"file":"CompatibilityUtils.js"}