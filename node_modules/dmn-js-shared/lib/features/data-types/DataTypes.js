function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var DEFAULT_DATA_TYPES = ['string', 'boolean', 'number', 'date', 'time', 'dateTime', 'dayTimeDuration', 'yearMonthDuration', 'Any'];
/**
 * Provide data types via config.
 *
 * @example
 *
 * // The data types will include multiple number types: integer, long, and double.
 * const editor = new DmnJS({
 *   common: {
 *     dataTypes: [
 *       'string',
 *       'boolean',
 *       'integer',
 *       'long',
 *       'double',
 *       'date'
 *     ]
 *   }
 * })
 */

var DataTypes = /*#__PURE__*/function () {
  /**
   * @param {string[]} configuredDataTypes
   */
  function DataTypes(configuredDataTypes) {
    _classCallCheck(this, DataTypes);

    this._dataTypes = configuredDataTypes || DEFAULT_DATA_TYPES;
  }
  /**
   * Get list of configured data types.
   *
   * @returns {string[]}
   */


  _createClass(DataTypes, [{
    key: "getAll",
    value: function getAll() {
      return this._dataTypes;
    }
  }]);

  return DataTypes;
}();

export { DataTypes as default };
DataTypes.$inject = ['config.dataTypes'];
//# sourceMappingURL=DataTypes.js.map