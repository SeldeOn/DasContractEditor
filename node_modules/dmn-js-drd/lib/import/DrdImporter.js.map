{"version":3,"sources":["../../src/import/DrdImporter.js"],"names":["assign","map","is","DrdImporter","eventBus","canvas","elementFactory","elementRegistry","_eventBus","_canvas","_elementRegistry","_elementFactory","$inject","prototype","root","semantic","element","createRoot","elementData","setRootElement","add","di","waypoints","source","target","elementDefinition","bounds","$instanceOf","x","Math","round","y","width","height","createShape","addShape","fire","collectWaypoints","_getSource","_getTarget","hidden","createConnection","addConnection","Error","id","href","elementReference","sourceRef","requiredDecision","requiredInput","requiredKnowledge","requiredAuthority","_getShape","getIdFromHref","targetRef","$parent","get","attrs","type","$type","businessObject","edge","waypoint","position","original","split","pop"],"mappings":"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","sourcesContent":["import {\n  assign,\n  map\n} from 'min-dash';\n\nimport {\n  is\n} from 'dmn-js-shared/lib/util/ModelUtil';\n\n\nexport default function DrdImporter(\n    eventBus,\n    canvas,\n    elementFactory,\n    elementRegistry) {\n\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementRegistry = elementRegistry;\n  this._elementFactory = elementFactory;\n}\n\nDrdImporter.$inject = [\n  'eventBus',\n  'canvas',\n  'elementFactory',\n  'elementRegistry'\n];\n\n\nDrdImporter.prototype.root = function(semantic) {\n  var element = this._elementFactory.createRoot(elementData(semantic));\n\n  this._canvas.setRootElement(element);\n\n  return element;\n};\n\n/**\n * Add drd element (semantic) to the canvas.\n */\nDrdImporter.prototype.add = function(semantic) {\n  var elementFactory = this._elementFactory,\n      canvas = this._canvas,\n      eventBus = this._eventBus,\n      di = semantic.di;\n\n  var element, waypoints, source, target, elementDefinition, bounds;\n\n  if (di.$instanceOf('dmndi:DMNShape')) {\n    bounds = di.bounds;\n\n    elementDefinition = elementData(semantic, {\n      x: Math.round(bounds.x),\n      y: Math.round(bounds.y),\n      width: Math.round(bounds.width),\n      height: Math.round(bounds.height)\n    });\n\n    element = elementFactory.createShape(elementDefinition);\n\n    canvas.addShape(element);\n\n    eventBus.fire('drdElement.added', { element: element, di: di });\n\n  } else if (di.$instanceOf('dmndi:DMNEdge')) {\n    waypoints = collectWaypoints(di);\n\n    source = this._getSource(semantic);\n    target = this._getTarget(semantic);\n\n    if (source && target) {\n      elementDefinition = elementData(semantic, {\n        hidden: false,\n        source: source,\n        target: target,\n        waypoints: waypoints\n      });\n\n      element = elementFactory.createConnection(elementDefinition);\n\n      canvas.addConnection(element);\n\n      eventBus.fire('drdElement.added', { element: element, di: di });\n    }\n\n  } else {\n    throw new Error('unknown di for element ' + semantic.id);\n  }\n\n  return element;\n};\n\nDrdImporter.prototype._getSource = function(semantic) {\n  var href, elementReference;\n\n  if (is(semantic, 'dmn:Association')) {\n    elementReference = semantic.sourceRef;\n  } else if (is(semantic, 'dmn:InformationRequirement')) {\n    elementReference = semantic.requiredDecision || semantic.requiredInput;\n  } else if (is(semantic, 'dmn:KnowledgeRequirement')) {\n    elementReference = semantic.requiredKnowledge;\n  } else if (is(semantic, 'dmn:AuthorityRequirement')) {\n    elementReference = semantic.requiredDecision ||\n      semantic.requiredInput || semantic.requiredAuthority;\n  }\n\n  if (elementReference) {\n    href = elementReference.href;\n  }\n\n  if (href) {\n    return this._getShape(getIdFromHref(href));\n  }\n};\n\nDrdImporter.prototype._getTarget = function(semantic) {\n  if (is(semantic, 'dmn:Association')) {\n    return semantic.targetRef && this._getShape(getIdFromHref(semantic.targetRef.href));\n  }\n\n  return this._getShape(semantic.$parent.id);\n};\n\nDrdImporter.prototype._getShape = function(id) {\n  return this._elementRegistry.get(id);\n};\n\n\n\n// helper /////\nfunction elementData(semantic, attrs) {\n  return assign({\n    id: semantic.id,\n    type: semantic.$type,\n    businessObject: semantic\n  }, attrs);\n}\n\nfunction collectWaypoints(edge) {\n  var waypoints = edge.waypoint;\n\n  if (waypoints) {\n    return map(waypoints, function(waypoint) {\n      var position = { x: waypoint.x, y: waypoint.y };\n\n      return assign({ original: position }, position);\n    });\n  }\n}\n\nfunction getIdFromHref(href) {\n  return href.split('#').pop();\n}\n"],"file":"DrdImporter.js"}