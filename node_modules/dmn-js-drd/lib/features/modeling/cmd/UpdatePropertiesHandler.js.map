{"version":3,"sources":["../../../../src/features/modeling/cmd/UpdatePropertiesHandler.js"],"names":["reduce","keys","forEach","NAME","ID","UpdatePropertiesHandler","elementRegistry","moddle","_elementRegistry","_moddle","$inject","prototype","execute","context","element","changed","Error","ids","businessObject","properties","oldProperties","getProperties","isIdChange","unclaim","updateId","claim","label","push","setProperties","revert","propertyNames","result","key","get","value","set"],"mappings":"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","sourcesContent":["import {\n  reduce,\n  keys,\n  forEach\n} from 'min-dash';\n\nvar NAME = 'name',\n    ID = 'id';\n\n\n/**\n * A handler that implements a DMN property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying DMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n */\nexport default function UpdatePropertiesHandler(elementRegistry, moddle) {\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n}\n\nUpdatePropertiesHandler.$inject = [ 'elementRegistry', 'moddle' ];\n\n\n/**\n * Updates a DMN element with a list of new properties\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element to update\n * @param {Object} context.properties a list of properties to set on the element's\n *                                    businessObject (the DMN model element)\n *\n * @return {Array<djs.model.Base>} the updated element\n */\nUpdatePropertiesHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      changed = [ element];\n\n  if (!element) {\n    throw new Error('element required');\n  }\n\n  var elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  var businessObject = element.businessObject,\n      properties = context.properties,\n      oldProperties = (\n        context.oldProperties ||\n        getProperties(businessObject, keys(properties))\n      );\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n\n    elementRegistry.updateId(element, properties[ID]);\n\n    ids.claim(properties[ID], businessObject);\n  }\n\n  if (NAME in properties && element.label) {\n    changed.push(element.label);\n  }\n\n  // update properties\n  setProperties(businessObject, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n\n/**\n * Reverts the update on a DMN elements properties.\n *\n * @param  {Object} context\n *\n * @return {djs.model.Base} the updated element\n */\nUpdatePropertiesHandler.prototype.revert = function(context) {\n\n  var element = context.element,\n      properties = context.properties,\n      oldProperties = context.oldProperties,\n      businessObject = element.businessObject,\n      elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  // update properties\n  setProperties(businessObject, oldProperties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n\n    elementRegistry.updateId(element, oldProperties[ID]);\n\n    ids.claim(oldProperties[ID], businessObject);\n  }\n\n  return context.changed;\n};\n\n\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\n\n\nfunction getProperties(businessObject, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = businessObject.get(key);\n    return result;\n  }, {});\n}\n\n\nfunction setProperties(businessObject, properties) {\n  forEach(properties, function(value, key) {\n    businessObject.set(key, value);\n  });\n}\n"],"file":"UpdatePropertiesHandler.js"}