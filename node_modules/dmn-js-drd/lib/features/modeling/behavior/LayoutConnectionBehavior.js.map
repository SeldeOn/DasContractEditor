{"version":3,"sources":["../../../../src/features/modeling/behavior/LayoutConnectionBehavior.js"],"names":["inherits","CommandInterceptor","is","isAny","asTRBL","getMid","getOrientation","assign","forEach","LOW_PRIORITY","LayoutConnectionBehavior","injector","layouter","modeling","rules","invoke","preExecute","context","connection","source","newSource","target","newTarget","allowed","orientation","hints","getConnectionHints","updateInformationRequirements","informationRequirements","incoming","filter","incomingInformationRequirementsByOrientation","getInformationRequirementsByOrientation","sortInformationRequirements","connectionStartEnd","getConnectionsStartEnd","informationRequirement","index","connectionStart","start","connectionEnd","end","waypoints","layoutConnection","updateWaypoints","postExecuted","incomingOrientation","isSameOrientation","length","shapes","closure","enclosedConnections","shape","incomingInformationRequirements","id","outgoing","$inject","includes","y","height","x","width","map","sourceMid","sourceTrbl","targetTrbl","top","left","bottom","right","split","shift","push","orientationA","orientationB","axis","sort","a","b"],"mappings":"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","sourcesContent":["import inherits from 'inherits';\r\n\r\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\r\n\r\nimport {\r\n  is,\r\n  isAny\r\n} from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\nimport {\r\n  asTRBL,\r\n  getMid,\r\n  getOrientation\r\n} from 'diagram-js/lib/layout/LayoutUtil';\r\n\r\nimport {\r\n  assign,\r\n  forEach\r\n} from 'min-dash';\r\n\r\nvar LOW_PRIORITY = 500;\r\n\r\n\r\nexport default function LayoutConnectionBehavior(injector, layouter, modeling, rules) {\r\n  injector.invoke(CommandInterceptor, this);\r\n\r\n  // specify connection start and end on connection create\r\n  this.preExecute([\r\n    'connection.create',\r\n    'connection.reconnect'\r\n  ], function(context) {\r\n    var connection = context.connection,\r\n        source = context.newSource || context.source,\r\n        target = context.newTarget || context.target;\r\n\r\n    if (is(connection, 'dmn:InformationRequirement')\r\n      && !rules.allowed('connection.connect', {\r\n        connection: connection,\r\n        source: source,\r\n        target: target\r\n      })\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (!is(connection, 'dmn:InformationRequirement')) {\r\n      return;\r\n    }\r\n\r\n    var orientation = getOrientation(source, target);\r\n\r\n    if (!context.hints) {\r\n      context.hints = {};\r\n    }\r\n\r\n    assign(context.hints, getConnectionHints(source, target, orientation));\r\n  }, true);\r\n\r\n  /**\r\n   * Update incoming information requirements.\r\n   *\r\n   * @param {djs.model.Shape} target\r\n   * @param {Array<djs.model.Connection>} [informationRequirements]\r\n   * @param {string} [orientation]\r\n   */\r\n  function updateInformationRequirements(target, informationRequirements, orientation) {\r\n\r\n    // (1) get information requirements\r\n    if (!informationRequirements) {\r\n      informationRequirements = target.incoming.filter(function(incoming) {\r\n        return is(incoming, 'dmn:InformationRequirement');\r\n      });\r\n    }\r\n\r\n    var incomingInformationRequirementsByOrientation = {};\r\n\r\n    // (2) get information requirements per orientation\r\n    if (orientation) {\r\n      incomingInformationRequirementsByOrientation[ orientation ] =\r\n        informationRequirements;\r\n    } else {\r\n      incomingInformationRequirementsByOrientation =\r\n        getInformationRequirementsByOrientation(target, informationRequirements);\r\n    }\r\n\r\n    // (3) update information requirements per orientation\r\n    forEach(incomingInformationRequirementsByOrientation,\r\n      function(informationRequirements, orientation) {\r\n\r\n        // (3.1) sort information requirements\r\n        informationRequirements = sortInformationRequirements(\r\n          informationRequirements,\r\n          orientation\r\n        );\r\n\r\n        // (3.2) get new connection start and end\r\n        var connectionStartEnd =\r\n          getConnectionsStartEnd(informationRequirements, target, orientation);\r\n\r\n        // (3.3) update information requirements\r\n        informationRequirements.forEach((informationRequirement, index) => {\r\n          var connectionStart = connectionStartEnd[ index ].start,\r\n              connectionEnd = connectionStartEnd[ index ].end;\r\n\r\n          var waypoints = layouter.layoutConnection(informationRequirement, {\r\n            connectionStart: connectionStart,\r\n            connectionEnd: connectionEnd\r\n          });\r\n\r\n          modeling.updateWaypoints(informationRequirement, waypoints);\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  // update information requirements on connection create and delete\r\n  // update information requirements of new target on connection reconnect\r\n  this.postExecuted([\r\n    'connection.create',\r\n    'connection.delete',\r\n    'connection.reconnect'\r\n  ], function(context) {\r\n    var connection = context.connection,\r\n        source = connection.source || context.source,\r\n        target = connection.target || context.target;\r\n\r\n    if (!is(connection, 'dmn:InformationRequirement')) {\r\n      return;\r\n    }\r\n\r\n    var orientation = getOrientation(source, target);\r\n\r\n    // update all information requirements with same orientation\r\n    var informationRequirements = target.incoming.filter(incoming => {\r\n      var incomingOrientation = getOrientation(incoming.source, incoming.target);\r\n\r\n      return is(incoming, 'dmn:InformationRequirement')\r\n        && isSameOrientation(incomingOrientation, orientation);\r\n    });\r\n\r\n    if (!informationRequirements.length) {\r\n      return;\r\n    }\r\n\r\n    updateInformationRequirements(target, informationRequirements, orientation);\r\n  }, true);\r\n\r\n  // update information requirements of old target on connection reconnect\r\n  this.preExecute('connection.reconnect', function(context) {\r\n    var connection = context.connection,\r\n        source = connection.source,\r\n        target = connection.target;\r\n\r\n    if (!is(connection, 'dmn:InformationRequirement')) {\r\n      return;\r\n    }\r\n\r\n    var orientation = getOrientation(source, target);\r\n\r\n    // update all information requirements with same orientation except reconnected\r\n    var informationRequirements = target.incoming.filter(incoming => {\r\n      var incomingOrientation = getOrientation(incoming.source, incoming.target);\r\n\r\n      return incoming !== connection\r\n        && is(incoming, 'dmn:InformationRequirement')\r\n        && isSameOrientation(incomingOrientation, orientation);\r\n    });\r\n\r\n    if (!informationRequirements.length) {\r\n      return;\r\n    }\r\n\r\n    updateInformationRequirements(target, informationRequirements, orientation);\r\n  }, true);\r\n\r\n  // update information requirements on elements move\r\n  this.postExecuted('elements.move', LOW_PRIORITY, function(context) {\r\n    var shapes = context.shapes,\r\n        closure = context.closure,\r\n        enclosedConnections = closure.enclosedConnections;\r\n\r\n    shapes.forEach(function(shape) {\r\n      if (!isAny(shape, [ 'dmn:Decision', 'dmn:InputData' ])) {\r\n        return;\r\n      }\r\n\r\n      // (1) update incoming information requirements\r\n      var incomingInformationRequirements = shape.incoming.filter(function(incoming) {\r\n        return is(incoming, 'dmn:InformationRequirement')\r\n          && !enclosedConnections[ incoming.id ];\r\n      });\r\n\r\n      if (incomingInformationRequirements.length) {\r\n        updateInformationRequirements(shape, incomingInformationRequirements);\r\n      }\r\n\r\n      // (2) update outgoing information requirements\r\n      shape.outgoing.forEach(function(outgoing) {\r\n        if (!is(outgoing, 'dmn:InformationRequirement')\r\n          || enclosedConnections[ outgoing.id ]) {\r\n          return;\r\n        }\r\n\r\n        updateInformationRequirements(outgoing.target);\r\n      });\r\n    });\r\n  }, true);\r\n}\r\n\r\nLayoutConnectionBehavior.$inject = [\r\n  'injector',\r\n  'layouter',\r\n  'modeling',\r\n  'rules'\r\n];\r\n\r\ninherits(LayoutConnectionBehavior, CommandInterceptor);\r\n\r\n// helpers //////////\r\n\r\nfunction getConnectionHints(source, target, orientation) {\r\n  var connectionStart = getMid(source),\r\n      connectionEnd = getMid(target);\r\n\r\n  if (orientation.includes('bottom')) {\r\n    connectionStart.y = source.y;\r\n    connectionEnd.y = target.y + target.height;\r\n  } else if (orientation.includes('top')) {\r\n    connectionStart.y = source.y + source.height;\r\n    connectionEnd.y = target.y;\r\n  } else if (orientation.includes('right')) {\r\n    connectionStart.x = source.x;\r\n    connectionEnd.x = target.x + target.width;\r\n  } else {\r\n    connectionStart.x = source.x + source.width;\r\n    connectionEnd.x = target.x;\r\n  }\r\n\r\n  return {\r\n    connectionStart: connectionStart,\r\n    connectionEnd: connectionEnd\r\n  };\r\n}\r\n\r\n/**\r\n * Get connections start and end based on number of information requirements and\r\n * orientation.\r\n *\r\n * @param {Array<djs.model.Connection>} informationRequirements\r\n * @param {djs.model.Shape} target\r\n * @param {string} orientation\r\n *\r\n * @returns {Array<Object>}\r\n */\r\nfunction getConnectionsStartEnd(informationRequirements, target, orientation) {\r\n  return informationRequirements.map(\r\n    function(informationRequirement, index) {\r\n      var source = informationRequirement.source,\r\n          sourceMid = getMid(source),\r\n          sourceTrbl = asTRBL(source),\r\n          targetTrbl = asTRBL(target);\r\n\r\n      var length = informationRequirements.length;\r\n\r\n      if (orientation.includes('bottom')) {\r\n        return {\r\n          start: {\r\n            x: sourceMid.x,\r\n            y: sourceTrbl.top\r\n          },\r\n          end: {\r\n            x: targetTrbl.left + target.width / (length + 1) * (index + 1),\r\n            y: targetTrbl.bottom\r\n          }\r\n        };\r\n      } else if (orientation.includes('top')) {\r\n        return {\r\n          start: {\r\n            x: sourceMid.x,\r\n            y: sourceTrbl.bottom\r\n          },\r\n          end: {\r\n            x: targetTrbl.left + target.width / (length + 1) * (index + 1),\r\n            y: targetTrbl.top\r\n          }\r\n        };\r\n      } else if (orientation.includes('right')) {\r\n        return {\r\n          start: {\r\n            x: sourceTrbl.left,\r\n            y: sourceMid.y\r\n          },\r\n          end: {\r\n            x: targetTrbl.right,\r\n            y: targetTrbl.top + target.height / (length + 1) * (index + 1)\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          start: {\r\n            x: sourceTrbl.right,\r\n            y: sourceMid.y\r\n          },\r\n          end: {\r\n            x: targetTrbl.left,\r\n            y: targetTrbl.top + target.height / (length + 1) * (index + 1)\r\n          }\r\n        };\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Get information requirements by orientation.\r\n *\r\n * @param {djs.model.shape} target\r\n * @param {Array<djs.model.Connection>} informationRequirements\r\n *\r\n * @returns {Object}\r\n */\r\nfunction getInformationRequirementsByOrientation(target, informationRequirements) {\r\n  var incomingInformationRequirementsByOrientation = {};\r\n\r\n  informationRequirements.forEach(function(incoming) {\r\n    var orientation = getOrientation(incoming.source, target).split('-').shift();\r\n\r\n    if (!incomingInformationRequirementsByOrientation[ orientation ]) {\r\n      incomingInformationRequirementsByOrientation[ orientation ] = [];\r\n    }\r\n\r\n    incomingInformationRequirementsByOrientation[ orientation ].push(incoming);\r\n  });\r\n\r\n  return incomingInformationRequirementsByOrientation;\r\n}\r\n\r\nfunction isSameOrientation(orientationA, orientationB) {\r\n  return orientationA\r\n    && orientationB\r\n    && orientationA.split('-').shift() === orientationB.split('-').shift();\r\n}\r\n\r\nfunction sortInformationRequirements(informationRequirements, orientation) {\r\n  var axis;\r\n\r\n  if (orientation.includes('top') || orientation.includes('bottom')) {\r\n    axis = 'x';\r\n  } else {\r\n    axis = 'y';\r\n  }\r\n\r\n  return informationRequirements.sort(function(a, b) {\r\n    return getMid(a.source)[ axis ] - getMid(b.source)[ axis ];\r\n  });\r\n}"],"file":"LayoutConnectionBehavior.js"}