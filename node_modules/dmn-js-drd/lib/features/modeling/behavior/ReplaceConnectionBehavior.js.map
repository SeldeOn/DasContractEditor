{"version":3,"sources":["../../../../src/features/modeling/behavior/ReplaceConnectionBehavior.js"],"names":["inherits","CommandInterceptor","ReplaceConnectionBehavior","injector","modeling","rules","invoke","preExecute","context","connection","source","newSource","target","newTarget","waypoints","slice","allowed","type","connect","removeConnection","$inject"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,kBAAP,MAA+B,2CAA/B;AAGA,eAAe,SAASC,yBAAT,CAAmCC,QAAnC,EAA6CC,QAA7C,EAAuDC,KAAvD,EAA8D;AAC3EF,EAAAA,QAAQ,CAACG,MAAT,CAAgBL,kBAAhB,EAAoC,IAApC;AAEA,OAAKM,UAAL,CAAgB,sBAAhB,EAAwC,UAASC,OAAT,EAAkB;AACxD,QAAIC,UAAU,GAAGD,OAAO,CAACC,UAAzB;AAAA,QACIC,MAAM,GAAGF,OAAO,CAACG,SAAR,IAAqBF,UAAU,CAACC,MAD7C;AAAA,QAEIE,MAAM,GAAGJ,OAAO,CAACK,SAAR,IAAqBJ,UAAU,CAACG,MAF7C;AAAA,QAGIE,SAAS,GAAGL,UAAU,CAACK,SAAX,CAAqBC,KAArB,EAHhB;AAKA,QAAIC,OAAO,GAAGX,KAAK,CAACW,OAAN,CAAc,sBAAd,EAAsC;AAClDP,MAAAA,UAAU,EAAEA,UADsC;AAElDC,MAAAA,MAAM,EAAEA,MAF0C;AAGlDE,MAAAA,MAAM,EAAEA;AAH0C,KAAtC,CAAd;;AAMA,QAAI,CAACI,OAAD,IAAYA,OAAO,CAACC,IAAR,KAAiBR,UAAU,CAACQ,IAA5C,EAAkD;AAChD;AACD;;AAEDT,IAAAA,OAAO,CAACC,UAAR,GAAqBL,QAAQ,CAACc,OAAT,CAAiBR,MAAjB,EAAyBE,MAAzB,EAAiC;AACpDK,MAAAA,IAAI,EAAED,OAAO,CAACC,IADsC;AAEpDH,MAAAA,SAAS,EAAEA;AAFyC,KAAjC,CAArB;AAKAV,IAAAA,QAAQ,CAACe,gBAAT,CAA0BV,UAA1B;AACD,GAtBD,EAsBG,IAtBH;AAuBD;AAEDT,QAAQ,CAACE,yBAAD,EAA4BD,kBAA5B,CAAR;AAEAC,yBAAyB,CAACkB,OAA1B,GAAoC,CAClC,UADkC,EAElC,UAFkC,EAGlC,OAHkC,CAApC","sourcesContent":["import inherits from 'inherits';\r\n\r\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\r\n\r\n\r\nexport default function ReplaceConnectionBehavior(injector, modeling, rules) {\r\n  injector.invoke(CommandInterceptor, this);\r\n\r\n  this.preExecute('connection.reconnect', function(context) {\r\n    var connection = context.connection,\r\n        source = context.newSource || connection.source,\r\n        target = context.newTarget || connection.target,\r\n        waypoints = connection.waypoints.slice();\r\n\r\n    var allowed = rules.allowed('connection.reconnect', {\r\n      connection: connection,\r\n      source: source,\r\n      target: target\r\n    });\r\n\r\n    if (!allowed || allowed.type === connection.type) {\r\n      return;\r\n    }\r\n\r\n    context.connection = modeling.connect(source, target, {\r\n      type: allowed.type,\r\n      waypoints: waypoints\r\n    });\r\n\r\n    modeling.removeConnection(connection);\r\n  }, true);\r\n}\r\n\r\ninherits(ReplaceConnectionBehavior, CommandInterceptor);\r\n\r\nReplaceConnectionBehavior.$inject = [\r\n  'injector',\r\n  'modeling',\r\n  'rules'\r\n];"],"file":"ReplaceConnectionBehavior.js"}