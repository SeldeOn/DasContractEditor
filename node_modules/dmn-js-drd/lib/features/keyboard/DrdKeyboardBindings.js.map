{"version":3,"sources":["../../../src/features/keyboard/DrdKeyboardBindings.js"],"names":["inherits","KeyboardBindings","DrdKeyboardBindings","injector","invoke","$inject","prototype","registerBindings","keyboard","editorActions","call","addListener","action","fn","isRegistered","context","event","keyEvent","isKey","isCmd","trigger","hasModifier"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,OAAOC,gBAAP,MAA6B,mDAA7B;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACpDA,EAAAA,QAAQ,CAACC,MAAT,CAAgBH,gBAAhB,EAAkC,IAAlC;AACD;AAEDD,QAAQ,CAACE,mBAAD,EAAsBD,gBAAtB,CAAR;AAEAC,mBAAmB,CAACG,OAApB,GAA8B,CAC5B,UAD4B,CAA9B;AAKA;AACA;AACA;AACA;AACA;AACA;;AACAH,mBAAmB,CAACI,SAApB,CAA8BC,gBAA9B,GAAiD,UAASC,QAAT,EAAmBC,aAAnB,EAAkC;AAEjF;AACAR,EAAAA,gBAAgB,CAACK,SAAjB,CAA2BC,gBAA3B,CAA4CG,IAA5C,CAAiD,IAAjD,EAAuDF,QAAvD,EAAiEC,aAAjE;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,WAASE,WAAT,CAAqBC,MAArB,EAA6BC,EAA7B,EAAiC;AAE/B,QAAIJ,aAAa,CAACK,YAAd,CAA2BF,MAA3B,CAAJ,EAAwC;AACtCJ,MAAAA,QAAQ,CAACG,WAAT,CAAqBE,EAArB;AACD;AACF,GAjBgF,CAmBjF;AACA;;;AACAF,EAAAA,WAAW,CAAC,gBAAD,EAAmB,UAASI,OAAT,EAAkB;AAE9C,QAAIC,KAAK,GAAGD,OAAO,CAACE,QAApB;;AAEA,QAAIT,QAAQ,CAACU,KAAT,CAAe,CAAC,GAAD,EAAM,GAAN,CAAf,EAA2BF,KAA3B,KAAqCR,QAAQ,CAACW,KAAT,CAAeH,KAAf,CAAzC,EAAgE;AAC9DP,MAAAA,aAAa,CAACW,OAAd,CAAsB,gBAAtB;AAEA,aAAO,IAAP;AACD;AACF,GATU,CAAX,CArBiF,CAgCjF;AACA;;AACAT,EAAAA,WAAW,CAAC,WAAD,EAAc,UAASI,OAAT,EAAkB;AAEzC,QAAIC,KAAK,GAAGD,OAAO,CAACE,QAApB;;AAEA,QAAIT,QAAQ,CAACa,WAAT,CAAqBL,KAArB,CAAJ,EAAiC;AAC/B;AACD;;AAED,QAAIR,QAAQ,CAACU,KAAT,CAAe,CAAC,GAAD,EAAM,GAAN,CAAf,EAA2BF,KAA3B,CAAJ,EAAuC;AACrCP,MAAAA,aAAa,CAACW,OAAd,CAAsB,WAAtB;AAEA,aAAO,IAAP;AACD;AACF,GAbU,CAAX,CAlCiF,CAiDjF;AACA;;AACAT,EAAAA,WAAW,CAAC,UAAD,EAAa,UAASI,OAAT,EAAkB;AAExC,QAAIC,KAAK,GAAGD,OAAO,CAACE,QAApB;;AAEA,QAAIT,QAAQ,CAACa,WAAT,CAAqBL,KAArB,CAAJ,EAAiC;AAC/B;AACD;;AAED,QAAIR,QAAQ,CAACU,KAAT,CAAe,CAAC,GAAD,EAAM,GAAN,CAAf,EAA2BF,KAA3B,CAAJ,EAAuC;AACrCP,MAAAA,aAAa,CAACW,OAAd,CAAsB,UAAtB;AAEA,aAAO,IAAP;AACD;AACF,GAbU,CAAX,CAnDiF,CAkEjF;AACA;;AACAT,EAAAA,WAAW,CAAC,eAAD,EAAkB,UAASI,OAAT,EAAkB;AAE7C,QAAIC,KAAK,GAAGD,OAAO,CAACE,QAApB;;AAEA,QAAIT,QAAQ,CAACa,WAAT,CAAqBL,KAArB,CAAJ,EAAiC;AAC/B;AACD;;AAED,QAAIR,QAAQ,CAACU,KAAT,CAAe,CAAC,GAAD,EAAM,GAAN,CAAf,EAA2BF,KAA3B,CAAJ,EAAuC;AACrCP,MAAAA,aAAa,CAACW,OAAd,CAAsB,eAAtB;AAEA,aAAO,IAAP;AACD;AACF,GAbU,CAAX;AAeD,CAnFD","sourcesContent":["import inherits from 'inherits';\n\nimport KeyboardBindings from 'diagram-js/lib/features/keyboard/KeyboardBindings';\n\n\n/**\n * DRD specific key bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nexport default function DrdKeyboardBindings(injector) {\n  injector.invoke(KeyboardBindings, this);\n}\n\ninherits(DrdKeyboardBindings, KeyboardBindings);\n\nDrdKeyboardBindings.$inject = [\n  'injector'\n];\n\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nDrdKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {\n\n  // inherit default bindings\n  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);\n\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {string} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  }\n\n  // select all elements\n  // CTRL + A\n  addListener('selectElements', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('selectElements');\n\n      return true;\n    }\n  });\n\n  // activate lasso tool\n  // L\n  addListener('lassoTool', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['l', 'L'], event)) {\n      editorActions.trigger('lassoTool');\n\n      return true;\n    }\n  });\n\n  // activate hand tool\n  // H\n  addListener('handTool', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['h', 'H'], event)) {\n      editorActions.trigger('handTool');\n\n      return true;\n    }\n  });\n\n  // activate direct editing\n  // E\n  addListener('directEditing', function(context) {\n\n    var event = context.keyEvent;\n\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard.isKey(['e', 'E'], event)) {\n      editorActions.trigger('directEditing');\n\n      return true;\n    }\n  });\n\n};"],"file":"DrdKeyboardBindings.js"}