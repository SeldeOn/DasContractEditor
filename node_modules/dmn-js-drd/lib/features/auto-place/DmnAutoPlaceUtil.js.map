{"version":3,"sources":["../../../src/features/auto-place/DmnAutoPlaceUtil.js"],"names":["is","findFreePosition","generateGetNextPosition","getConnectedDistance","asTRBL","getMid","DECISION_SIZE","DIRECTION_LEFT","DIRECTION_RIGHT","DRG_ELEMENT_MARGIN","DRG_ELEMENT_ROW_SIZE","width","getNewShapePosition","source","element","getTextAnnotationPosition","getDRGElementPosition","sourceTrbl","position","x","right","y","top","height","nextPositionDirection","margin","minDistance","sourceMid","getWeight","connection","target","verticalDistance","defaultDistance","direction","filter","reference","bottom","generateGetNextDRGElementPosition","getHorizontalDistance","a","b","Math","abs","connectedAtPositionLeft","connectedAtPositionRight","previousPosition","connectedAtPreviousPosition","min","left","max"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kCAAnB;AAEA,SACEC,gBADF,EAEEC,uBAFF,EAGEC,oBAHF,QAIO,kDAJP;AAMA,SACEC,MADF,EAEEC,MAFF,QAGO,kCAHP;AAKA,SAASC,aAAT,QAA8B,4BAA9B;AAEA,IAAIC,cAAc,GAAG,MAArB;AAAA,IACIC,eAAe,GAAG,OADtB;AAGA,IAAIC,kBAAkB,GAAG,EAAzB;AAAA,IACIC,oBAAoB,GAAGJ,aAAa,CAACK,KADzC;AAIA,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,OAArC,EAA8C;AACnD,MAAId,EAAE,CAACc,OAAD,EAAU,oBAAV,CAAN,EAAuC;AACrC,WAAOC,yBAAyB,CAACF,MAAD,EAASC,OAAT,CAAhC;AACD;;AAED,MAAId,EAAE,CAACc,OAAD,EAAU,gBAAV,CAAN,EAAmC;AACjC,WAAOE,qBAAqB,CAACH,MAAD,EAASC,OAAT,CAA5B;AACD;AACF;AAED;AACA;AACA;;AACA,SAASC,yBAAT,CAAmCF,MAAnC,EAA2CC,OAA3C,EAAoD;AAElD,MAAIG,UAAU,GAAGb,MAAM,CAACS,MAAD,CAAvB;AAEA,MAAIK,QAAQ,GAAG;AACbC,IAAAA,CAAC,EAAEF,UAAU,CAACG,KAAX,GAAmBN,OAAO,CAACH,KAAR,GAAgB,CADzB;AAEbU,IAAAA,CAAC,EAAEJ,UAAU,CAACK,GAAX,GAAiB,EAAjB,GAAsBR,OAAO,CAACS,MAAR,GAAiB;AAF7B,GAAf;AAKA,MAAIC,qBAAqB,GAAG;AAC1BH,IAAAA,CAAC,EAAE;AACDI,MAAAA,MAAM,EAAE,CAAC,EADR;AAEDC,MAAAA,WAAW,EAAE;AAFZ;AADuB,GAA5B;AAOA,SAAOzB,gBAAgB,CACrBY,MADqB,EAErBC,OAFqB,EAGrBI,QAHqB,EAIrBhB,uBAAuB,CAACsB,qBAAD,CAJF,CAAvB;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASR,qBAAT,CAA+BH,MAA/B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAIG,UAAU,GAAGb,MAAM,CAACS,MAAD,CAAvB;AAAA,MACIc,SAAS,GAAGtB,MAAM,CAACQ,MAAD,CADtB;;AAGA,WAASe,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B,WAAOA,UAAU,CAACC,MAAX,KAAsBjB,MAAtB,GAA+B,CAA/B,GAAmC,CAAC,CAA3C;AACD;;AAED,MAAIkB,gBAAgB,GAAG5B,oBAAoB,CAACU,MAAD,EAAS;AAClDmB,IAAAA,eAAe,EAAE,GADiC;AAElDC,IAAAA,SAAS,EAAE,GAFuC;AAGlDL,IAAAA,SAAS,EAAEA,SAHuC;AAIlDM,IAAAA,MAAM,EAAEA,MAJ0C;AAKlDC,IAAAA,SAAS,EAAE;AALuC,GAAT,CAA3C;AAQA,MAAIjB,QAAQ,GAAG;AACbC,IAAAA,CAAC,EAAEQ,SAAS,CAACR,CADA;AAEbE,IAAAA,CAAC,EAAEJ,UAAU,CAACmB,MAAX,GAAoBL;AAFV,GAAf;AAKA,SAAO9B,gBAAgB,CACrBY,MADqB,EAErBC,OAFqB,EAGrBI,QAHqB,EAIrBmB,iCAAiC,CAACxB,MAAD,CAJZ,CAAvB;AAMD,C,CAGD;;;AAEA,SAASqB,MAAT,CAAgBL,UAAhB,EAA4B;AAC1B,SAAO,CAAC7B,EAAE,CAAC6B,UAAD,EAAa,iBAAb,CAAV;AACD;;AAED,SAASS,qBAAT,CAA+BC,CAA/B,EAAkCC,CAAlC,EAAqC;AACnC,SAAOC,IAAI,CAACC,GAAL,CAASF,CAAC,CAACrB,CAAF,GAAMoB,CAAC,CAACpB,CAAjB,CAAP;AACD;;AAED,SAASkB,iCAAT,CAA2CxB,MAA3C,EAAmD;AACjD,MAAIc,SAAS,GAAGtB,MAAM,CAACQ,MAAD,CAAtB;AAEA,MAAI8B,uBAAJ,EACIC,wBADJ;AAGA,SAAO,UAAS9B,OAAT,EAAkB+B,gBAAlB,EAAoCC,2BAApC,EAAiE;AACtE,QAAIb,SAAJ,CADsE,CAGtE;;AACA,QAAI,CAACU,uBAAL,EAA8B;AAC5BA,MAAAA,uBAAuB,GAAGG,2BAA1B;AACAF,MAAAA,wBAAwB,GAAGE,2BAA3B;;AAEA,UAAIzC,MAAM,CAACyC,2BAAD,CAAN,CAAoC3B,CAApC,GAAwCQ,SAAS,CAACR,CAAlD,GAAsD,CAA1D,EAA6D;AAC3Dc,QAAAA,SAAS,GAAG1B,cAAZ;AACD,OAFD,MAEO;AACL0B,QAAAA,SAAS,GAAGzB,eAAZ;AACD;AACF,KATD,MASO;AACL,UAAIqC,gBAAgB,CAAC1B,CAAjB,GAAqBQ,SAAS,CAACR,CAAnC,EAAsC;AACpCwB,QAAAA,uBAAuB,GAAGG,2BAA1B;AACD,OAFD,MAEO;AACLF,QAAAA,wBAAwB,GAAGE,2BAA3B;AACD;;AAED,UAAIR,qBAAqB,CAACX,SAAD,EAAYtB,MAAM,CAACsC,uBAAD,CAAlB,CAArB,GACAL,qBAAqB,CAACX,SAAD,EAAYtB,MAAM,CAACuC,wBAAD,CAAlB,CADzB,EACwE;AACtEX,QAAAA,SAAS,GAAG1B,cAAZ;AACD,OAHD,MAGO;AACL0B,QAAAA,SAAS,GAAGzB,eAAZ;AACD;AACF,KA1BqE,CA4BtE;;;AACA,QAAIyB,SAAS,KAAK1B,cAAlB,EAAkC;AAChC,aAAO;AACLY,QAAAA,CAAC,EAAEsB,IAAI,CAACM,GAAL,CACD1C,MAAM,CAACsC,uBAAD,CAAN,CAAgCxB,CAAhC,GAAoCT,oBAApC,GAA2DD,kBAD1D,EAEDL,MAAM,CAACuC,uBAAD,CAAN,CAAgCK,IAAhC,GAAuCvC,kBAAvC,GAA4DK,OAAO,CAACH,KAAR,GAAgB,CAF3E,CADE;AAKLU,QAAAA,CAAC,EAAEwB,gBAAgB,CAACxB;AALf,OAAP;AAOD,KARD,MAQO;AACL,aAAO;AACLF,QAAAA,CAAC,EAAEsB,IAAI,CAACQ,GAAL,CACD5C,MAAM,CAACuC,wBAAD,CAAN,CAAiCzB,CAAjC,GAAqCT,oBAArC,GAA4DD,kBAD3D,EAEDL,MAAM,CAACwC,wBAAD,CAAN,CAAiCxB,KAAjC,GAAyCX,kBAAzC,GAA8DK,OAAO,CAACH,KAAR,GAAgB,CAF7E,CADE;AAKLU,QAAAA,CAAC,EAAEwB,gBAAgB,CAACxB;AALf,OAAP;AAOD;AACF,GA9CD;AA+CD","sourcesContent":["import { is } from 'dmn-js-shared/lib/util/ModelUtil';\r\n\r\nimport {\r\n  findFreePosition,\r\n  generateGetNextPosition,\r\n  getConnectedDistance\r\n} from 'diagram-js/lib/features/auto-place/AutoPlaceUtil';\r\n\r\nimport {\r\n  asTRBL,\r\n  getMid\r\n} from 'diagram-js/lib/layout/LayoutUtil';\r\n\r\nimport { DECISION_SIZE } from '../modeling/ElementFactory';\r\n\r\nvar DIRECTION_LEFT = 'left',\r\n    DIRECTION_RIGHT = 'right';\r\n\r\nvar DRG_ELEMENT_MARGIN = 60,\r\n    DRG_ELEMENT_ROW_SIZE = DECISION_SIZE.width;\r\n\r\n\r\nexport function getNewShapePosition(source, element) {\r\n  if (is(element, 'dmn:TextAnnotation')) {\r\n    return getTextAnnotationPosition(source, element);\r\n  }\r\n\r\n  if (is(element, 'dmn:DRGElement')) {\r\n    return getDRGElementPosition(source, element);\r\n  }\r\n}\r\n\r\n/**\r\n * Always try to place text annotations top right of source.\r\n */\r\nfunction getTextAnnotationPosition(source, element) {\r\n\r\n  var sourceTrbl = asTRBL(source);\r\n\r\n  var position = {\r\n    x: sourceTrbl.right + element.width / 2,\r\n    y: sourceTrbl.top - 50 - element.height / 2\r\n  };\r\n\r\n  var nextPositionDirection = {\r\n    y: {\r\n      margin: -30,\r\n      minDistance: 20\r\n    }\r\n  };\r\n\r\n  return findFreePosition(\r\n    source,\r\n    element,\r\n    position,\r\n    generateGetNextPosition(nextPositionDirection)\r\n  );\r\n}\r\n\r\n/**\r\n * Get position for DRG elements.\r\n *\r\n * @param {djs.model.Shape} source\r\n * @param {djs.model.Shape} element\r\n *\r\n * @returns {Point}\r\n */\r\nfunction getDRGElementPosition(source, element) {\r\n  var sourceTrbl = asTRBL(source),\r\n      sourceMid = getMid(source);\r\n\r\n  function getWeight(connection) {\r\n    return connection.target === source ? 1 : -1;\r\n  }\r\n\r\n  var verticalDistance = getConnectedDistance(source, {\r\n    defaultDistance: 180,\r\n    direction: 's',\r\n    getWeight: getWeight,\r\n    filter: filter,\r\n    reference: 'center'\r\n  });\r\n\r\n  var position = {\r\n    x: sourceMid.x,\r\n    y: sourceTrbl.bottom + verticalDistance\r\n  };\r\n\r\n  return findFreePosition(\r\n    source,\r\n    element,\r\n    position,\r\n    generateGetNextDRGElementPosition(source)\r\n  );\r\n}\r\n\r\n\r\n// helpers //////////\r\n\r\nfunction filter(connection) {\r\n  return !is(connection, 'dmn:Association');\r\n}\r\n\r\nfunction getHorizontalDistance(a, b) {\r\n  return Math.abs(b.x - a.x);\r\n}\r\n\r\nfunction generateGetNextDRGElementPosition(source) {\r\n  var sourceMid = getMid(source);\r\n\r\n  var connectedAtPositionLeft,\r\n      connectedAtPositionRight;\r\n\r\n  return function(element, previousPosition, connectedAtPreviousPosition) {\r\n    var direction;\r\n\r\n    // (1) get direction\r\n    if (!connectedAtPositionLeft) {\r\n      connectedAtPositionLeft = connectedAtPreviousPosition;\r\n      connectedAtPositionRight = connectedAtPreviousPosition;\r\n\r\n      if (getMid(connectedAtPreviousPosition).x - sourceMid.x > 0) {\r\n        direction = DIRECTION_LEFT;\r\n      } else {\r\n        direction = DIRECTION_RIGHT;\r\n      }\r\n    } else {\r\n      if (previousPosition.x < sourceMid.x) {\r\n        connectedAtPositionLeft = connectedAtPreviousPosition;\r\n      } else {\r\n        connectedAtPositionRight = connectedAtPreviousPosition;\r\n      }\r\n\r\n      if (getHorizontalDistance(sourceMid, getMid(connectedAtPositionLeft))\r\n        < getHorizontalDistance(sourceMid, getMid(connectedAtPositionRight))) {\r\n        direction = DIRECTION_LEFT;\r\n      } else {\r\n        direction = DIRECTION_RIGHT;\r\n      }\r\n    }\r\n\r\n    // (2) get next position\r\n    if (direction === DIRECTION_LEFT) {\r\n      return {\r\n        x: Math.min(\r\n          getMid(connectedAtPositionLeft).x - DRG_ELEMENT_ROW_SIZE - DRG_ELEMENT_MARGIN,\r\n          asTRBL(connectedAtPositionLeft).left - DRG_ELEMENT_MARGIN - element.width / 2\r\n        ),\r\n        y: previousPosition.y\r\n      };\r\n    } else {\r\n      return {\r\n        x: Math.max(\r\n          getMid(connectedAtPositionRight).x + DRG_ELEMENT_ROW_SIZE + DRG_ELEMENT_MARGIN,\r\n          asTRBL(connectedAtPositionRight).right + DRG_ELEMENT_MARGIN + element.width / 2\r\n        ),\r\n        y: previousPosition.y\r\n      };\r\n    }\r\n  };\r\n}"],"file":"DmnAutoPlaceUtil.js"}