{"version":3,"sources":["../../src/draw/PathMap.js"],"names":["PathMap","pathMap","d","width","height","widthElements","heightElements","getRawPath","pathId","getScaledPath","param","rawPath","mx","my","abspos","x","y","containerWidth","position","containerHeight","coordinates","heightRatio","yScaleFactor","widthRatio","xScaleFactor","heightIndex","length","widthIndex","path","format","e","tokenRegex","objNotationRegex","replacer","all","key","obj","res","replace","name","quote","quotedName","isFunc","str","String"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\n\n/**\n * Map containing SVG paths needed by BpmnRenderer.\n */\n\nexport default function PathMap() {\n\n  /**\n   * Contains a map of path elements\n   *\n   * <h1>Path definition</h1>\n   * A parameterized path is defined like this:\n   * <pre>\n   * 'GATEWAY_PARALLEL': {\n   *   d: 'm {mx},{my} {e.x0},0 0,{e.x1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +\n          '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',\n   *   height: 17.5,\n   *   width:  17.5,\n   *   heightElements: [2.5, 7.5],\n   *   widthElements: [2.5, 7.5]\n   * }\n   * </pre>\n   * <p>It's important to specify a correct <b>height and width</b> for the path as the scaling\n   * is based on the ratio between the specified height and width in this object and the\n   * height and width that is set as scale target (Note x,y coordinates will be scaled with\n   * individual ratios).</p>\n   * <p>The '<b>heightElements</b>' and '<b>widthElements</b>' array must contain the values that will be scaled.\n   * The scaling is based on the computed ratios.\n   * Coordinates on the y axis should be in the <b>heightElement</b>'s array, they will be scaled using\n   * the computed ratio coefficient.\n   * In the parameterized path the scaled values can be accessed through the 'e' object in {} brackets.\n   *   <ul>\n   *    <li>The values for the y axis can be accessed in the path string using {e.y0}, {e.y1}, ....</li>\n   *    <li>The values for the x axis can be accessed in the path string using {e.x0}, {e.x1}, ....</li>\n   *   </ul>\n   *   The numbers x0, x1 respectively y0, y1, ... map to the corresponding array index.\n   * </p>\n    m1,1\n    l 0,55.3\n    c 29.8,19.7 48.4,-4.2 67.2,-6.7\n    c 12.2,-2.3 19.8,1.6 30.8,6.2\n    l 0,-54.6\n    z\n    */\n  this.pathMap = {\n    'KNOWLEDGE_SOURCE': {\n      d: 'm {mx},{my} ' +\n         'l 0,{e.y0} ' +\n         'c {e.x0},{e.y1} {e.x1},-{e.y2} {e.x2},-{e.y3} ' +\n         'c {e.x3},-{e.y4} {e.x4},{e.y5} {e.x5},{e.y6} ' +\n         'l 0,-{e.y7}z',\n      width:  100,\n      height: 65,\n      widthElements: [ 29.8, 48.4, 67.2, 12.2, 19.8, 30.8 ],\n      heightElements: [ 55.3, 19.7, 4.2, 6.7, 2.3, 1.6, 6.2, 54.6 ]\n    },\n    'BUSINESS_KNOWLEDGE_MODEL': {\n      d: 'm {mx},{my} l {e.x0},-{e.y0} l {e.x1},0 l 0,{e.y1} l -{e.x2},{e.y2} l -{e.x3},0z',\n      width:  125,\n      height: 45,\n      widthElements: [ 13.8, 109.2, 13.8, 109.1 ],\n      heightElements: [ 13.2, 29.8, 13.2 ]\n    },\n    'TEXT_ANNOTATION': {\n      d: 'm {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0',\n      width: 10,\n      height: 30,\n      widthElements: [ 10 ],\n      heightElements: [ 30 ]\n    }\n  };\n\n  this.getRawPath = function getRawPath(pathId) {\n    return this.pathMap[pathId].d;\n  };\n\n  /**\n   * Scales the path to the given height and width.\n   * <h1>Use case</h1>\n   * <p>Use case is to scale the content of elements (event, gateways) based\n   * on the element bounding box's size.\n   * </p>\n   * <h1>Why not transform</h1>\n   * <p>Scaling a path with transform() will also scale the stroke and IE does not support\n   * the option 'non-scaling-stroke' to prevent this.\n   * Also there are use cases where only some parts of a path should be\n   * scaled.</p>\n   *\n   * @param {string} pathId The ID of the path.\n   * @param {Object} param <p>\n   *   Example param object scales the path to 60% size of the container (data.width, data.height).\n   *   <pre>\n   *   {\n   *     xScaleFactor: 0.6,\n   *     yScaleFactor:0.6,\n   *     containerWidth: data.width,\n   *     containerHeight: data.height,\n   *     position: {\n   *       mx: 0.46,\n   *       my: 0.2,\n   *     }\n   *   }\n   *   </pre>\n   *   <ul>\n   *    <li>targetpathwidth = xScaleFactor * containerWidth</li>\n   *    <li>targetpathheight = yScaleFactor * containerHeight</li>\n   *    <li>Position is used to set the starting coordinate of the path. M is computed:\n    *    <ul>\n    *      <li>position.x * containerWidth</li>\n    *      <li>position.y * containerHeight</li>\n    *    </ul>\n    *    Center of the container <pre> position: {\n   *       mx: 0.5,\n   *       my: 0.5,\n   *     }</pre>\n   *     Upper left corner of the container\n   *     <pre> position: {\n   *       mx: 0.0,\n   *       my: 0.0,\n   *     }</pre>\n   *    </li>\n   *   </ul>\n   * </p>\n   *\n   */\n  this.getScaledPath = function getScaledPath(pathId, param) {\n    var rawPath = this.pathMap[pathId];\n\n    // positioning\n    // compute the start point of the path\n    var mx, my;\n\n    if (param.abspos) {\n      mx = param.abspos.x;\n      my = param.abspos.y;\n    } else {\n      mx = param.containerWidth * param.position.mx;\n      my = param.containerHeight * param.position.my;\n    }\n\n    var coordinates = {}; // map for the scaled coordinates\n    if (param.position) {\n\n      // path\n      var heightRatio = (param.containerHeight / rawPath.height) * param.yScaleFactor;\n      var widthRatio = (param.containerWidth / rawPath.width) * param.xScaleFactor;\n\n\n      // Apply height ratio\n      for (var heightIndex = 0; heightIndex < rawPath.heightElements.length; heightIndex++) {\n        coordinates['y' + heightIndex] = rawPath.heightElements[heightIndex] * heightRatio;\n      }\n\n      // Apply width ratio\n      for (var widthIndex = 0; widthIndex < rawPath.widthElements.length; widthIndex++) {\n        coordinates['x' + widthIndex] = rawPath.widthElements[widthIndex] * widthRatio;\n      }\n    }\n\n    // Apply value to raw path\n    var path = format(\n      rawPath.d, {\n        mx: mx,\n        my: my,\n        e: coordinates\n      }\n    );\n    return path;\n  };\n}\n\n\n// helpers //////////////////////\n\n// copied and adjusted from https://github.com/adobe-webplatform/Snap.svg/blob/master/src/svg.js\nvar tokenRegex = /\\{([^{}]+)\\}/g,\n    objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g; // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\nfunction replacer(all, key, obj) {\n  var res = obj;\n  key.replace(objNotationRegex, function(all, name, quote, quotedName, isFunc) {\n    name = name || quotedName;\n    if (res) {\n      if (name in res) {\n        res = res[name];\n      }\n      typeof res == 'function' && isFunc && (res = res());\n    }\n  });\n  res = (res == null || res == obj ? all : res) + '';\n\n  return res;\n}\n\nfunction format(str, obj) {\n  return String(str).replace(tokenRegex, function(all, key) {\n    return replacer(all, key, obj);\n  });\n}\n"],"file":"PathMap.js"}